{
  
    
        "post0": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - &lt;span style=&quot;color:blue&quot;&gt; A database schema is a blueprint or a plan that outlines the logical and physical structure of a database. It defines how the data is organized, stored, and accessed within the database. The schema defines the tables, columns, data types, relationships between tables, constraints, and indexes in the database. &lt;/span&gt; . What is the purpose of identity Column in SQL database? . An identity column in SQL database is a column that automatically generates unique numeric values for each row in a table. The purpose of an identity column is to provide a unique and sequential identifier for each record in the table, which can be used as a primary key or a foreign key in other tables. | . | What is the purpose of a primary key in SQL database? . A primary key in SQL database ensures uniqueness and data integrity, and enables referencing of records in other tables. | . | What are the Data Types in SQL table? . SQL tables support numeric and character string data types, including INT, BIGINT, DECIMAL, FLOAT, CHAR, VARCHAR, and TEXT. | . | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;scores&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? A connection object represents a connection to a database, used to authenticate the user and execute queries or commands against the database. | . | Same for cursor object? . A cursor object is an object in programming used to traverse and manipulate the results of a database query, typically one row at a time. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? . Special variables, function variables, class variables, in transaction, isolation level, row factory, and total changes are some of the properties included in the conn object. Special variables, function variables, arraysize, connection, description, lastrowid, row factory, and rowcount are some of the properties that make up the cursor object. | . | Is &quot;results&quot; an object? How do you know? . Yes it is an object because it is cursor.execute(), which is an object. | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM scores&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (6, &#39;Grace&#39;, &#39;8&#39;) (7, &#39;Grace&#39;, &#39;5&#39;) (18, &#39;Shruthi&#39;, &#39;6&#39;) (29, &#39;Grace&#39;, &#39;8&#39;) (30, &#39;Claire&#39;, &#39;6&#39;) (31, &#39;Claire&#39;, &#39;3&#39;) (32, &#39;Annika&#39;, &#39;9&#39;) (33, &#39;Mortensen&#39;, &#39;4&#39;) (34, &#39;Grace&#39;, &#39;8&#39;) (35, &#39;Claire&#39;, &#39;6&#39;) (36, &#39;Claire&#39;, &#39;3&#39;) (37, &#39;Annika&#39;, &#39;9&#39;) (38, &#39;Mortensen&#39;, &#39;4&#39;) (39, &#39;Grace&#39;, &#39;8&#39;) (40, &#39;Claire&#39;, &#39;6&#39;) (41, &#39;Claire&#39;, &#39;3&#39;) (42, &#39;Annika&#39;, &#39;9&#39;) (43, &#39;Mortensen&#39;, &#39;4&#39;) (44, &#39;Grace&#39;, &#39;8&#39;) (45, &#39;Claire&#39;, &#39;6&#39;) (46, &#39;Claire&#39;, &#39;3&#39;) (47, &#39;Annika&#39;, &#39;9&#39;) (48, &#39;Mortensen&#39;, &#39;4&#39;) (49, &#39;Grace&#39;, &#39;8&#39;) (50, &#39;Claire&#39;, &#39;6&#39;) (51, &#39;Claire&#39;, &#39;3&#39;) (52, &#39;Annika&#39;, &#39;9&#39;) (53, &#39;Mortensen&#39;, &#39;4&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? The create function in 2.4a uses SQLite database to input user data to create the new users. The create function of 2.4b uses SQLAlchemy to create the new users. 2.4a function can be better used for more simple projects where as 2.4b function can be used for more complex projects. | . | Explain purpose of SQL INSERT. Is this the same as User init? SQL INSERT inserts new records. __init__ also creates new records. | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO scores (_name, _uid) VALUES (?, ?)&quot;, (name, uid)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? . Verifies that the new password is at least two characters long. The code assumes that they were hacked if it is not. - Explain try/except, when would except occur? | Try/except is like an if else statement. If the try doesn&#39;t work, the except occurs. | . | What code seems to be repeated in each of these examples to point, why is it repeated? . Try/except is repeated. This is repeated because there are many different places where checking to ensure everything is inputted correctly is necessary. | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been updated&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? DELETE is a dangerous function because the records can not be recovered | . | What is the &quot;f&quot; and {uid} do? &quot;f&quot; and {uid} is an f string, where uid is printed in a string | . | . import sqlite3 def delete(): name = input(&quot;Enter user to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM scores WHERE _name = ?&quot;, (name,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {name} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {name} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? The menu repeats because it is recursive. | . | Could you refactor this menu? Make it work with a List? Yes, you can make it a list with crud methods | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . The row with uid Grace was successfully deleted (18, &#39;Shruthi&#39;, &#39;6&#39;) (30, &#39;Claire&#39;, &#39;6&#39;) (31, &#39;Claire&#39;, &#39;3&#39;) (32, &#39;Annika&#39;, &#39;9&#39;) (33, &#39;Mortensen&#39;, &#39;4&#39;) (35, &#39;Claire&#39;, &#39;6&#39;) (36, &#39;Claire&#39;, &#39;3&#39;) (37, &#39;Annika&#39;, &#39;9&#39;) (38, &#39;Mortensen&#39;, &#39;4&#39;) (40, &#39;Claire&#39;, &#39;6&#39;) (41, &#39;Claire&#39;, &#39;3&#39;) (42, &#39;Annika&#39;, &#39;9&#39;) (43, &#39;Mortensen&#39;, &#39;4&#39;) (45, &#39;Claire&#39;, &#39;6&#39;) (46, &#39;Claire&#39;, &#39;3&#39;) (47, &#39;Annika&#39;, &#39;9&#39;) (48, &#39;Mortensen&#39;, &#39;4&#39;) (50, &#39;Claire&#39;, &#39;6&#39;) (51, &#39;Claire&#39;, &#39;3&#39;) (52, &#39;Annika&#39;, &#39;9&#39;) (53, &#39;Mortensen&#39;, &#39;4&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Score(db.Model): __tablename__ = &#39;scores&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid): self._name = name # variables with self prefix become part of the object, self._uid = uid # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . from random import randrange def initScores(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.init_app(app) db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = Score(name=&#39;Grace&#39;, uid=&#39;8&#39;) u2 = Score(name=&#39;Claire&#39;, uid=&#39;6&#39;) u3 = Score(name=&#39;Claire&#39;, uid=&#39;3&#39;) u4 = Score(name=&#39;Annika&#39;, uid=&#39;9&#39;) u5 = Score(name=&#39;Mortensen&#39;, uid=&#39;4&#39;) users = [u1, u2, u3, u4, u5] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add a few 1 to 4 notes per user&#39;&#39;&#39; for num in range(randrange(1, 4)): note = &quot;#### &quot; + user.name + &quot; note &quot; + str(num) + &quot;. n Generated by test data.&quot; &#39;&#39;&#39;add user/post data to table&#39;&#39;&#39; user.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {user.uid}&quot;) # initScores() . New Table . .",
            "url": "https://gwang1224.github.io/repository_1/trimester%203/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/trimester%203/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; defining the template for users . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . ValueError Traceback (most recent call last) /Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 12 in create() &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; try: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; except ValueError: File /opt/homebrew/Cellar/python@3.10/3.10.9/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_strptime.py:568, in _strptime_datetime(cls, data_string, format) 566 &#34;&#34;&#34;Return a class cls instance based on the input string and the 567 format string.&#34;&#34;&#34; --&gt; 568 tt, fraction, gmtoff_fraction = _strptime(data_string, format) 569 tzname, gmtoff = tt[-2:] File /opt/homebrew/Cellar/python@3.10/3.10.9/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_strptime.py:349, in _strptime(data_string, format) 348 if not found: --&gt; 349 raise ValueError(&#34;time data %r does not match format %r&#34; % 350 (data_string, format)) 351 if len(data_string) != found.end(): ValueError: time data &#39;&#39; does not match format &#39;%Y-%m-%d&#39; During handling of the above exception, another exception occurred: AttributeError Traceback (most recent call last) /Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 12 in &lt;cell line: 38&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=34&#39;&gt;35&lt;/a&gt; except: # error raised if object not created &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; print(&#34;Unknown error uid {uid}&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; create() /Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 12 in create() &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; except ValueError: &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; user.dob = datetime.today() &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; print(f&#34;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; # write object to database &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sZmlsZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; with app.app_context(): AttributeError: &#39;User&#39; object has no attribute &#39;dbo&#39; . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Claire&#39;, &#39;uid&#39;: &#39;clairez&#39;, &#39;dob&#39;: &#39;09-02-2005&#39;, &#39;age&#39;: 17}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . Delete functionality . def delete(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) if user is None: print(f&quot;User {uid} is not found :(&quot;) with app.app_context(): try: user.delete() print(f&quot;User {uid} has been deleted.&quot;) except: print(f&quot;There was an problem in deleting user {uid}&quot;) delete() . User toby has been deleted. . Update functionality . def update(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) if user is None: print(f&quot;User {uid} is not found :(&quot;) return print(user) new_name = input(&quot;What is your new name: &quot;) new_uid = input(&quot;What is your new uid: &quot;) new_password = input(&quot;What is your new password: &quot;) with app.app_context(): try: user.update(new_name, new_uid, new_password) print(f&quot;User {uid} has been updated.&quot;) except: print(f&quot;There was an problem in updating user {uid}&quot;) update() . {&#34;id&#34;: 7, &#34;name&#34;: &#34;Claire&#34;, &#34;uid&#34;: &#34;clairez&#34;, &#34;dob&#34;: &#34;09-02-2005&#34;, &#34;age&#34;: 17} User clairez has been updated. . &lt;/div&gt; | .",
            "url": "https://gwang1224.github.io/repository_1/trimester%203/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/trimester%203/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . College Board Quizzes . . import csv # open the input TSV file for reading with open(&#39;files/gene_x_sample.tsv&#39;, &#39;r&#39;) as tsv_file: # create a CSV writer for writing to the output file with open(&#39;files/gene_x_sample.csv&#39;, &#39;w&#39;, newline=&#39;&#39;) as csv_file: csv_writer = csv.writer(csv_file) # read each line of the TSV file and write it as a row in the CSV file for line in tsv_file: csv_writer.writerow(line.strip().split(&#39; t&#39;)) . Does it have a good sample size? . Yes | . | Is there bias in the data? . No | . | Does the data set need to be cleaned? . No | . | What is the purpose of the data set? . The purpose of the dataset is to provide biological insight | . | . df_bio = pd.read_csv(&#39;files/gene_x_sample.csv&#39;) # print(df_bio.head(10)) print(df_bio) . Gene GSM158635 GSM158636 GSM158637 GSM158638 GSM158639 0 A1CF 574.0 790.0 1593.0 1063.0 493.000000 1 A2M 1193.0 148.0 4485.0 609.0 3564.000000 2 A4GALT 96.0 97.0 34.0 102.0 64.666667 3 A4GNT 228.0 296.0 150.0 336.0 210.000000 4 AAAS 150.0 266.0 334.0 229.0 344.333333 ... ... ... ... ... ... ... 12269 ZXDB 6.0 97.0 -8.0 74.0 19.333333 12270 ZXDC 54.0 103.0 64.0 -78.0 284.666667 12271 ZYX 424.0 274.0 396.0 929.0 2165.000000 12272 ZZEF1 802.0 670.0 914.0 579.0 1058.333333 12273 ZZZ3 1316.0 1885.0 586.0 1839.0 1709.000000 GSM158640 GSM158641 GSM158642 GSM158643 0 566.666667 776.333333 520.666667 567.000000 1 2377.000000 73.666667 70.000000 306.000000 2 82.666667 96.333333 103.333333 104.333333 3 204.333333 276.000000 293.333333 234.666667 4 291.000000 414.000000 242.333333 260.666667 ... ... ... ... ... 12269 -10.666667 16.000000 9.333333 19.333333 12270 525.666667 28.666667 197.666667 152.000000 12271 934.666667 159.666667 532.000000 422.333333 12272 768.333333 735.333333 569.666667 399.666667 12273 2999.666667 2222.333333 4253.000000 2697.333333 [12274 rows x 10 columns] . print(df_bio.sort_values(by=[&#39;GSM158640&#39;], ascending=False)) . Gene GSM158635 GSM158636 GSM158637 GSM158638 GSM158639 142 ACTB 66044.0 66266.0 47487.0 54983.0 63634.000000 9203 RPS3A 65289.0 58770.0 55332.0 70352.0 61854.666670 9154 RPL41 75078.0 83695.0 78269.0 75828.0 66391.333330 8191 PPIA 45134.0 32582.0 44047.0 44191.0 57696.666670 9148 RPL37A 79417.0 92587.0 86380.0 82165.0 71138.666670 ... ... ... ... ... ... ... 2372 CRYBB3 -240.0 -291.0 -324.0 -344.0 -330.666667 3620 FBP2 -434.0 -244.0 -222.0 -256.0 -357.666667 5807 LIPC -357.0 -254.0 -232.0 -316.0 -253.000000 4082 GFRA4 -260.0 -242.0 -236.0 -235.0 -343.666667 7910 PITPNM3 -358.0 -224.0 -191.0 -171.0 -294.666667 GSM158640 GSM158641 GSM158642 GSM158643 142 74800.000000 58643.333330 68894.666670 64822.333330 9203 71366.333330 47161.333330 66355.000000 73795.333330 9154 69832.000000 78345.333330 72722.000000 70579.333330 8191 69819.666670 50736.000000 60732.000000 56457.333330 9148 68614.666670 88013.666670 71241.000000 73157.000000 ... ... ... ... ... 2372 -353.666667 -379.333333 -374.666667 -275.666667 3620 -374.333333 -352.000000 -313.000000 -295.666667 5807 -375.000000 -262.333333 -339.333333 -279.333333 4082 -383.333333 -269.666667 -333.333333 -255.333333 7910 -399.666667 -336.333333 -193.666667 -199.000000 [12274 rows x 10 columns] . print(df_bio[df_bio.GSM158640 == df_bio.GSM158640.max()]) print(df_bio[df_bio.GSM158640 == df_bio.GSM158640.min()]) . Gene GSM158635 GSM158636 GSM158637 GSM158638 GSM158639 GSM158640 142 ACTB 66044.0 66266.0 47487.0 54983.0 63634.0 74800.0 GSM158641 GSM158642 GSM158643 142 58643.33333 68894.66667 64822.33333 Gene GSM158635 GSM158636 GSM158637 GSM158638 GSM158639 7910 PITPNM3 -358.0 -224.0 -191.0 -171.0 -294.666667 GSM158640 GSM158641 GSM158642 GSM158643 7910 -399.666667 -336.333333 -193.666667 -199.0 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) .",
            "url": "https://gwang1224.github.io/repository_1/trimester%203/2023/03/09/AP-unit2-3.html",
            "relUrl": "/trimester%203/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | . Not every file format can be compressed, resized, etc. in the same way. For example, jpg and png files could not employ the same kind of compression technique. . Size, height and width, number of pixels | . Size, height, width, and resolution can be changed when compressing images. . Visual perception, lossy compression | . In lossy compression, the data in a file is removed by sacrificing visual perception and not restored to its original form after decompression. The image will appear less clear. . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . cd ls pwd . What are the command you use in Windows terminal to access files? | . dir chdir ren . What are some of the major differences? | . Windows has a different file structure as mac. Mac has a directory tree. Windows stores in windows registry. Files created on a Windows machine may not be compatible with macOS and vice versa. Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . Path is a big deal because it is important to know the location of the image. . How does the meta data source and label relate to Unit 5 topics? | . Meta data source and label relate to the Unit 5 topics of compression by because metadata contains information about compression. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . In Jupyter Notebooks, IPython provides a kernel that allows Python code to be executed within the notebook environment and creates interactive data analysis and visualization workflows using Pandas. For images, IPython provides the ability to display images within the notebook environment using the Image class without the need for external image editing tools. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Binary is a base-2 number system that uses only two symbols, 0 and 1, to represent data. Each digit in a binary number represents a power of 2, and the value of the number is the sum of these powers. Binary is used in computing and digital systems, as it is a simple and efficient way of representing and manipulating data.&lt;/p&gt; Hexadecimal is a base-16 number system that uses 16 symbols, 0-9 and A-F, to represent data. Each digit in a hexadecimal number represents a power of 16, and the value of the number is the sum of these powers. Hexadecimal is commonly used in computing and programming, as it provides a compact and human-readable way of representing large binary numbers.&lt;/span&gt; . Translate first 3 letters of your name to Base64. | . Gra -&gt; Z3Jh . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | . I have been a consumer of buffering when watching youtube. On youtube, when my internet connection is bad, the video will keep loading and will not play very well. . From your consumer experience, what effects have you experienced from buffering? | . From buffering, the video often lags very consistently, making me very impatient. This creates a bad video watching experience, it makes me very impatient. . How do these effects apply to images? | . Given that many frames must be loaded in images, extremely large pictures may buffer. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | . Yeah, it appears like the photographs are being altered through a succession of phases. . Describe Grey Scale algorithm in English or Pseudo code? | . The first step is to prepare and add the sequence of photos to the &quot;images&quot; vocabulary. The average of all the pixels is then calculated to provide the image&#39;s greyscale, and the new image is loaded using the averages. . Describe scale image? What is before and after on pixels in three images? | . The ability to scale up or down the size of the photographs is provided by the scale image function. The pixels are larger before scaling, but after taking the average of every pixel, they are shrunk to a lower size. . Is scale image a type of compression? If so, line it up with College Board terms described? | . Lossy compression is a method of compression that includes scaling a picture. In this case, the image quality is also sacrificed in order to lower the image file size. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_green(image) display(HTML(image[&#39;html_green&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | . PIL stands for &quot;Python Imaging Library&quot;, which is a library for the Python programming language that adds support for opening, manipulating, and saving many different image file formats. It provides a set of Python modules that allow developers to add image processing capabilities to their Python applications. PIL is widely used in various domains such as computer vision, image processing, and web development. . numpy | . NumPy is a Python library for working with numerical data, especially large, multi-dimensional arrays and matrices. It provides a wide range of mathematical operations and functions to operate on these arrays, making it a powerful tool for scientific computing, data analysis, and machine learning. NumPy is open source and widely used in the Python community. . base64 | . Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . . Notes: . Lossless compression is a technique that reduces the size of an image file without losing any image data. The original image can be perfectly reconstructed from the compressed file. Advantage: no image data is lost | Disadvantage: file size is not significantly reduced | . | . Lossy compression reduces the size of an image file by discarding some image data. Some image data is lost, and the original image cannot be perfectly reconstructed from the compressed file. This technique is used in formats such as JPEG. Advantage: significantly reduces file size | Disadvantage: image quality is reduced | . | . . Notes: . Four bits = 2^4 = 16 pieces of information | . . Binary can be used to represent characters, colors, and sounds. . . Lossless Data Compression: gif file formats are usually lossless compression . . Lossy Data Compression: I sent this photo from my iphone to my mac. This photo type is compressed because it is jpeg file format. . . Hacks . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . I added a gif which is a lossy compression to FLOW website. . . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . def image_management_add_html_green(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;green_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create green scale of image green = pixel[0] if len(pixel) &gt; 3: image[&#39;green_data&#39;].append((0, green, 0, pixel[3])) # PNG format else: image[&#39;green_data&#39;].append((0, green, 0)) # end for loop for pixels img.putdata(image[&#39;green_data&#39;]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) image_management_add_html_green(image) display(HTML(image[&#39;html_green&#39;])) print() . -- original image -- . -- original image -- . -- original image -- . . &lt;/div&gt; .",
            "url": "https://gwang1224.github.io/repository_1/trimester%203/2023/03/08/AP-2-2.html",
            "relUrl": "/trimester%203/2023/03/08/AP-2-2.html",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Trimester 2 College Board Multiple Choice",
            "content": "Trimester 2 College Board Multiple Choice . Score: 47/50 . Things to study: . Anonymous web browsing + personal privacy | computer systems | computing innovations multi-factor authentication | . | implement algorithms | robot moving problems | . . . Multi-factor authentication (MFA) is an access security product used to verify a user’s identity at login. It adds two or more identity-checking steps to user logins by use of secure authentication tools. . When a user enters an incorrect password more than two times in a row and gets locked out. This is not double authentication because only one password is inputted and checks for whether its accurate rather than checking for the identity of the user twice. All other choices offer two ways of identification. . . . I misunderstood this question. To do better next time, I could take more time to think about the question and logic it through more thoroughly. . . This question is about algorithms. Better to think through the logic and approach the problem slowly. . 3.6 Notes . algorithms: a finite set of instructions that accomplish a specific task | Example: Updating the High Score Set highScore to 10. | Get currentScore from user. | If currentScore is greater than highScore, set highScore to currentScore. | | . .",
            "url": "https://gwang1224.github.io/repository_1/trimester%203/2023/03/07/tri2-mc.html",
            "relUrl": "/trimester%203/2023/03/07/tri2-mc.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "View and Frontend Coding",
            "content": "GitHub Pages Organization and Design . HTML, JavaScript, and a JavaScript fetch are all things you can do in a GitHub Pages View. Additionally, every GitHub page inherits from Theme, minimizing need to define a lot of CSS. Some key elements... . Style, the visual design. SASS files in assets/css/style.scss, review GitHub pages theme for instructions | . | Head and Body. The HTML tags used to structure every page. Layout files in _layouts/default.html, structure is provided by GitHub pages theme | Supplement layout with files in _includes, for instance _layouts/home.html is used to add menu selections to pages by including it in _layouts/default.html. | . | Page. Markdown or HTML is defined and constructed into page using Jekyll Build, refer to content reference in _layouts/default.html. Observe how files are built by looking at generated html files under _site. | . View/CRUD Concepts . In a database project, the key idea is to build a system for capturing key information. For instance, student information on students and allowing *blogging to a Teacher would have Frontend View elements that correspond to a Backend Database. . Backend Database CRUD operations are as follows... . Create new student records | Read a list of students | Update student data | Delete records | . HTML to Obtain Input is a key step (aka Create/Input Step) . HTML5 table is a way to organize input . th labels | td input types | onclick action | . /* &lt;table&gt; &lt;tr&gt; &lt;th&gt;&lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;email&quot;&gt;Email&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;password&quot;&gt;Password&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;phone&quot;&gt;Phone&lt;/label&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;abc@xyz.org&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;tel&quot; name=&quot;phone_num&quot; id=&quot;phone_num&quot; pattern=&quot;[0-9]{3}-[0-9]{3}-[0-9]{4}&quot; placeholder=&quot;999-999-9999&quot;&gt;&lt;/td&gt; &lt;td &gt;&lt;button onclick=&quot;create_User()&quot;&gt;Create&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; */ . Table . Name Email Password Phone . | | | | Create | . HTML5 form is another way to organize input . form action vs onclick | p labels and input, in real implementation combine with CSS | . /* &lt;form action=&quot;create_User()&quot;&gt; &lt;p&gt;&lt;label&gt; Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; User ID: &lt;input type=&quot;text&quot; name=&quot;uid&quot; id=&quot;uid&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Password: &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt; Verify Password: &lt;input type=&quot;password&quot; name=&quot;passwordV&quot; id=&quot;passwordV&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Phone: &lt;input type=&quot;tel&quot; name=&quot;phone_num&quot; id=&quot;phone_num&quot; pattern=&quot;[0-9]{3}-[0-9]{3}-[0-9]{4}&quot; placeholder=&quot;999-999-9999&quot;&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Birthday: &lt;input type=&quot;date&quot; name=&quot;dob&quot; id=&quot;dob&quot;&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt; &lt;button&gt;Create&lt;/button&gt; &lt;/p&gt; &lt;/form&gt; */ . Form . Name: . User ID: . Password: Verify Password: . Phone: . Birthday: . Create . JavaScript Fetch and Response (aka Post Step) . After Input call action | Extract data from DOM | Build url | Fetch | Add response to end of table | . function create_User(){ // extract data from inputs const name = document.getElementById(&quot;name&quot;).value; const email = document.getElementById(&quot;email&quot;).value; const password = document.getElementById(&quot;password&quot;).value; const phone = document.getElementById(&quot;phone&quot;).value; const requestOptions = { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Authorization&#39;: &#39;Bearer my-token&#39;, }, }; //url for Create API const url=&#39;/crud_api/create/&#39; + name + &#39;/&#39; + email+ &#39;/&#39; + password + &#39;/&#39; + phone; //Async fetch API call to the database to create a new user fetch(url, requestOptions).then(response =&gt; { // prepare HTML search result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // trap error response from Web API if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); // Email must be unique, no duplicates allowed document.getElementById(&quot;pswError&quot;).innerHTML = &quot;Email already exists in the table&quot;; return; } // response contains valid result response.json().then(data =&gt; { console.log(data); //add a table row for the new/created userId const tr = document.createElement(&quot;tr&quot;); for (let key in data) { if (key !== &#39;query&#39;) { //create a DOM element for the data(cells) in table rows const td = document.createElement(&quot;td&quot;); console.log(data[key]); //truncate the displayed password to length 20 if (key === &#39;password&#39;){ td.innerHTML = data[key].substring(0,17)+&quot;...&quot;; } else{ td.innerHTML = data[key];} //add the DOM data element to the row tr.appendChild(td); } } //append the DOM row to the table table.appendChild(tr); }) }) } . HTML and JavaScript Display Table . JavaScript below shows elements needed to construct the rows of data in the table. . JSON is required, it is hardcoded in this example. Typically JSON will come from a JavaScript fetch. | JSON object is required, it is created from JSON string. This allows access to to elements in JSON using JavaScript dot notation (user._name) | DOM editing is a huge part of the remainder of this example. DOM elements often nest inside of other DOM elements. For instance each td is nested in tr. Find examples of DOM create and append in the code below. | Notice the definition of table and build you own map or visual of how these things are put together. | . /* &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Actions&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;table&quot;&gt; &lt;!-- javascript generated data --&gt; &lt;/tbody&gt; &lt;/table&gt; */ // Static json, this can be used to test data prior to API and Model being ready const json = &#39;[{&quot;_name&quot;: &quot;Thomas Edison&quot;, &quot;_uid&quot;: &quot;toby&quot;}, {&quot;_name&quot;: &quot;Nicholas Tesla&quot;, &quot;_uid&quot;: &quot;nick&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;}, {&quot;_name&quot;: &quot;Eli Whitney&quot;, &quot;_uid&quot;: &quot;eli&quot;}, {&quot;_name&quot;: &quot;Hedy Lemarr&quot;, &quot;_uid&quot;: &quot;hedy&quot;}]&#39;; // Convert JSON string to JSON object const data = JSON.parse(json); // prepare HTML result container for new output const table = document.getElementById(&quot;table&quot;); data.forEach(user =&gt; { // build a row for each user const tr = document.createElement(&quot;tr&quot;); // td&#39;s to build out each column of data const name = document.createElement(&quot;td&quot;); const id = document.createElement(&quot;td&quot;); const action = document.createElement(&quot;td&quot;); // add content from user data name.innerHTML = user._name; id.innerHTML = user._uid; // add action for update button var updateBtn = document.createElement(&#39;input&#39;); updateBtn.type = &quot;button&quot;; updateBtn.className = &quot;button&quot;; updateBtn.value = &quot;Update&quot;; updateBtn.style = &quot;margin-right:16px&quot;; updateBtn.onclick = function () { alert(&quot;Update: &quot; + user._uid); }; action.appendChild(updateBtn); // add action for delete button var deleteBtn = document.createElement(&#39;input&#39;); deleteBtn.type = &quot;button&quot;; deleteBtn.className = &quot;button&quot;; deleteBtn.value = &quot;Delete&quot;; deleteBtn.style = &quot;margin-right:16px&quot; deleteBtn.onclick = function () { alert(&quot;Delete: &quot; + user._uid); }; action.appendChild(deleteBtn); // add data to row tr.appendChild(name); tr.appendChild(id); tr.appendChild(action); // add row to table table.appendChild(tr); }); . evalmachine.&lt;anonymous&gt;:1 /* ^ SyntaxError: Identifier &#39;json&#39; has already been declared at evalmachine.&lt;anonymous&gt;:1:1 at Script.runInThisContext (vm.js:96:20) at Object.runInThisContext (vm.js:303:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at process.emit (events.js:182:13) at emit (internal/child_process.js:812:12) at process._tickCallback (internal/process/next_tick.js:63:19) . View/Blog Concepts . A notes/blog would be created to add Notes between students and teacher, part of original concept. Notes could be used for many types of applications. Details on creating notes will be part of another blog, but for now we want you to think about design. . In this design, most recent messages are on top | Messages are intended to support markdown and inclusion of images | Think about technique to format images in conjunction with Text | . . Hacks . Build and correlate a technical design between frontend view and backend model. This blog is focussing on frontend view., and visual concepts on how CRUD operations are presented to user of system. This particular Jupyter Notebook and code within it are used to help establish technical ideas. Start a design for your project... . Each project must have a View (as pictured) and Model (json data is fetched into the View). Describe your project. | Describe your View. Use Markdown, HTML, UML, other visuals, tables are used to characterize a project. This shows the Teacher and Graders understanding of planning Model and View. | Transition from pure design and start inserting code elements, like inputs. Also, try build a table with json data versus fetching data. | Issues should discuss problems/challenges, in Teacher/Student data here are a couple ... This design will have many JavaScript actions, at least one for each CRUD operation. In this design, developer needs think of JavaScript functions to replace placeholder alerts in example code above. | There can be different roles for CRUD operations. For instance, student will only interact with their own account. Teacher may interact with many accounts. | Given these CRUD operations what kind of APIs are needed? They should map closely button/on click actions, as each action will fetch or manipulate data differently. | . | . Extra Credit. Student(s) could assist in rework of my Flask project from last year into a Frontend / Backend solution. Additionally, if Frontend is done correctly it could easily be modified to work with both Spring and Flask backends. . References . Here are some working samples . Fetching table data | Obtaining input | .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2023/01/12/PBL-view.html",
            "relUrl": "/trimester%202/2023/01/12/PBL-view.html",
            "date": " • Jan 12, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Object-Oriented Programming",
            "content": "Terms . Object-Oriented Programming (OOP) | class is a blueprint for creating an Object (a data structure) | a class contains a collection of data (Attributes) and are pre-fixed using self, and a collection of Functions/Procedures (Methods) | an Object is an Instance of the Class and many Objects can be created from the same class | all methods in the Class become part of the Object, methods are accessed using dot notation (object.method()) | @ decorators allow access to instance data without the use of functions @property decorator (aka getter) enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter) enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Hacks . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf #CLASS OF @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class_of&quot;: self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, class_of={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&quot;1915&quot;) print(u1) u2 = User(name=&quot;Grace Wang&quot;, uid=&quot;gracew&quot;, password=&quot;Grace123&quot;, dob=date(2005,9,2), classOf=&quot;2024&quot;) print(u2) ###### For reference to see raw form ################ # print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) # print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) # print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;class_of&#34;: &#34;1915&#34;} {&#34;name&#34;: &#34;Grace Wang&#34;, &#34;uid&#34;: &#34;gracew&#34;, &#34;dob&#34;: &#34;09-02-2005&#34;, &#34;age&#34;: 17, &#34;class_of&#34;: &#34;2024&#34;} . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class Login: def __init__(self, name, uid, password, phone, email): self._name = name # variables with self prefix become part of the object, self._uid = uid self._phone = phone self.set_password(password) self._email = email #CLASS OF @property def email(self): return self._email @email.setter def email(self, email): self._email = email @property def phone(self): return self._phone @phone.setter def phone(self, phone): self._phone = phone @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;phone&quot;: self.phone, &quot;email&quot;: self.email } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},phone={self._phone}, class_of={self._email})&#39; u1 = Login(name=&quot;Grace Wang&quot;, uid=&quot;gracew&quot;, password=&quot;Grace123&quot;, phone=&quot;111-111-1111&quot;, email=&quot;gracewang187@gmail.com&quot;) print(u1) ###### For reference to see raw form ################ # print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) # print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) # print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Grace Wang&#34;, &#34;uid&#34;: &#34;gracew&#34;, &#34;phone&#34;: &#34;111-111-1111&#34;, &#34;email&#34;: &#34;gracewang187@gmail.com&#34;} .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2023/01/10/OOP.html",
            "relUrl": "/trimester%202/2023/01/10/OOP.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 3.17 & 3.18",
            "content": "Unit 3.18 . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(int(i)) else: i = (i / 2) list_.append(int(i)) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39; + &quot; n&quot;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;Sequence: &#39;) print(*l, sep=&quot; &quot;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Sequence: 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 Number of iterations: 24 . Unit 3.17 . num_list = [43,12,4,5,63,1,6,10] search_num = 5 if num_list[0] == search_num: print(&quot;The number was at index 0.&quot;) if num_list[1] == search_num: print(&quot;The number was at index 1.&quot;) if num_list[2] == search_num: print(&quot;The number was at index 2.&quot;) if num_list[3] == search_num: print(&quot;The number was at index 3.&quot;) if num_list[4] == search_num: print(&quot;The number was at index 4.&quot;) if num_list[5] == search_num: print(&quot;The number was at index 5.&quot;) if num_list[6] == search_num: print(&quot;The number was at index 6.&quot;) if num_list[7] == search_num: print(&quot;The number was at index 7.&quot;) . The number was at index 3. . num_list = [43,12,4,5,63,1,6,5] search_num = 5 index = num_list.index(search_num) print(f&quot;The number was at index {index}.&quot;) . The number was at index 3. . For this linear search algorithm, the inefficient code needs to manually input the index of the num_list. As seen each index is compared with the command . if num_list[0] == search_num: print(&quot;The number was at index 0.&quot;) . This makes the code extremely long as two lines of code needs to be written for each index. However, with a the index function, given an input, it will return the index at which the number appears, thus decreasing the lines of code from 18 to 4. . Algorithm efficiency: a property of an algorithm which relates to the amount of computational resources used by the algorithm, the more efficient an algorithm is, the better the code is because it will take less time and code . tasks = [&quot;finish homework&quot;, &quot;shower&quot;, &quot;skincare&quot;, &quot;read&quot;, &quot;sleep&quot;] def complete_tasks(tasks): for task in tasks: if task == &quot;finish homework&quot;: print(&quot;Finishing homework now!&quot;) elif task == &quot;shower&quot;: print(&quot;Showering now!&quot;) elif task == &quot;skincare&quot;: print(&quot;Skincare now!&quot;) elif task == &quot;read&quot;: print(&quot;Reading now!&quot;) elif task == &quot;sleep&quot;: print(&quot;Sleeping now!&quot;) complete_tasks(tasks) . Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . Explain algorithm efficiency in your own words (.25) . Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/14/unit3-17-18.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/14/unit3-17-18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 3.16",
            "content": "simulation: is an imitation of a situation or process | Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | . Hack 1 . Example Stimulation: Pendulum Stimulation . A pendulum stimulation can be used to teach students about oscillation and power/work in physics. This software is beneficial for physics teachers because it does not require the cost of buying the equipment for the lab. It also ensures that the data is more accurate in contrast to in real life physics labs where there is human error. . Hack 2 . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack 3 . What makes it a simulation? . This is a stimulation because instead of rolling dice in real life, this stimulation is a model of the dice rolling, which would produce a number that is achieved from the random integer. What are it’s advantages and disadvantages? | Advantages: cost effective: don&#39;t need to buy dice | more efficient: takes less time to generate number and don&#39;t have to wait until dice is finished rolling | can generate data immediately | . | disadvantages: isn&#39;t as fun as rolling the dice In your opinion, would an experiment be better in this situation? | . | I think code would be better because the results are produced instantly and can save time | . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . Hack #4 . Created new function that takes sum of dice rolled . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results ## New function to add sum of dice rolled def total(list): total = 0 for number in list: number = int(number) total += number return total num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) sum = total(roll_results) print(&quot;you rolled:&quot;, roll_results) print(&quot;The sum of your rolled dice is: &quot;, sum) . import random shirts = [&quot;floral&quot;, &quot;white&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;] shoes = [&quot;airforce1&quot;, &quot;boots&quot;, &quot;sneakers&quot;, &quot;slippers&quot;, &quot;jordans&quot;] pants = [&quot;jeans&quot;, &quot;tights&quot;, &quot;cargo pants&quot;, &quot;shorts&quot;, &quot;sweatpants&quot;] def rand_int(list): index = random.randint(0, len(list)-1) return index rand_shirt = shirts[rand_int(shirts)] rand_shoes = shoes[rand_int(shoes)] rand_pants = pants[rand_int(pants)] print(f&quot;You should wear a {rand_shirt} shirt, {rand_pants}, and {rand_shoes}. &quot;) . You should wear a red shirt, jeans, and airforce1. . This code is a stimulation for choosing an outfit. This is a stimulation because it is a model of the choices one has to go through to choose an outfit for the day. The advantages are that it produces an immediate response as opposed to some people who are indecisive. Disadvantages are that the outfits do not match the weather conditions and may not match in general. In my opinion, a real life experimentation would be better because people can pick clothes based on their liking. .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/13/unit3-16.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/13/unit3-16.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 3.14 & 3.15",
            "content": "Unit 3.14 . library contains procedures that can be used in the creation of new programs, saves time and effort | simplifies the task of creating complex programs. | Application program interfaces (APIs) | . Example . #instead of writing code to find the square root, the sqrt() # function in the math library gives the answer with the number in the argument import math math.sqrt(64) . 8.0 . # list of people can be indexed to get a random person in the list of people import random people = [&quot;Grace&quot;, &quot;Claire&quot;, &quot;Harry&quot;, &quot;Taylor&quot;, &quot;Annika&quot;, &quot;Jane&quot;] num = random.randint(0,6) print(num) print(people[num]) . 5 Jane . Lesson 3.15 . Hacks 3.15.1 . Define what an import random function do import random imports the random library, which contains many randomizing functions | . | List a few other things that we can import other than random numpy | math | your own files | requests | a module with .py | package | . | Hacks 3.15.2 . # one part is purple, one part is red, and one part is orange import random spinner = [&quot;green&quot;, &quot;green&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;, &quot;orange&quot;] index = random.randint(0,7) print(&quot;Your spinner spun: &quot; + spinner[index]) . Your spinner spun: green . Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . random(12,20) can produce outputs 12, 13, 14, 15, 16, 17, 18, 19, 20 .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/11/unit3-14-15.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/11/unit3-14-15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 3.12 & 3.13",
            "content": "Unit 3.12 . Vocab . procedure: set of instructions that can take parameters (do not have to have parameters and only have ()) and return values or the function | parameters: value inputted into a function for the function to produce a result | return value: the value that is returned after a function is run | output parameters: ? | . x = 5 y = 3 def multiply(x, y): #x,y are parameters product = x * y return product #return value answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . import math def squareroot(num): res = math.sqrt(num) return res print(squareroot(4)) print(squareroot(7)) print(squareroot(9)) print(squareroot(10)) . 2.0 2.6457513110645907 3.0 3.1622776601683795 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both . Unit 3.13 . Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction: the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication: having multiple duplicate code blocks, often decreasing readability and efficiency | Logic: the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Abstracting program logic into separate, smaller tasks is effective because the problem is easier to approach. By separating the tasks, the steps are clearly planned out and this avoids repetition and has more clarity. . import math #create functions for each calculator function #step 1: addition def add(a, b): print(a + b) #step 2: subtraction def subtract(a, b): print(a - b) #step 3: multiplication def multiply(a, b): print(a * b) #step 4: division def div(a, b): print(a/b) #step 5: square root def squareroot(num): print(math.sqrt(num)) #get 2 number inputs for addition, subtraction, multiplication, division def num_input(): num1 = int(input(&quot;First number:&quot;)) num2 = int(input(&quot;Second number:&quot;)) return num1, num2 #ask if user wants to add, subtract, multiply, division, squareroot function = input(&quot;Type +, -, /, *, or sqrt&quot;) #based on user&#39;s function input, perform math #add if function == &quot;+&quot;: num1, num2 = num_input() add(num1, num2) #subtract elif function == &quot;-&quot;: num1, num2 = num_input() subtract(num1, num2) #multiplication elif function == &quot;*&quot;: num1, num2 = num_input() multiply(num1, num2) #division elif function == &quot;/&quot;: num1, num2 = num_input() div(num1, num2) #sqrt elif function == &quot;sqrt&quot;: num1, num2 = num_input() squareroot(num1, num2) . 3 . Abstraction is needed for this math calculator because many steps are needed for the algorithm. First, functions need to be made for each of the mathematical operations. The code also needs to get the user input. Using the user input, the user can then determine what operation they want to use. The code should then print out the solution. These steps need to be broken down for the coder to now how to easily code calculator. . def split_string(s): &#39;&#39;&#39;takes a string as input and returns a list of words, where each word is a separate element in the list&#39;&#39;&#39; words = s.split(&quot; &quot;) new_words = [] for word in words: if word != &quot;&quot;: new_words.append(word) return words def count_words_starting_with_letter(words, letter): &#39;&#39;&#39;function takes a list of words as input and returns the number of words that start with the given letter&#39;&#39;&#39; count = 0 for word in words: if word.lower().startswith(letter): count += 1 return count def count_words_starting_with_a_in_string(s): &#39;&#39;&#39;takes a string as input and returns the number of words that start with &#39;a&#39;&#39;&#39;&#39; words = split_string(s) count = count_words_starting_with_letter(words, &quot;a&quot;) return count #HACKS def count_words_starting_with_letter_in_string(s, c): words = split_string(s) count = count_words_starting_with_letter(words, c) return count # example usage: string = &quot;hello, my name is grace. this is a test string&quot; h = &quot;h&quot; t = &quot;t&quot; s_count1 = count_words_starting_with_letter_in_string(string, h) s_count2 = count_words_starting_with_letter_in_string(string, t) print(f&quot;Words starting with h:&quot;, s_count1) print(f&quot;Words starting with t:&quot;, s_count2) . Words starting with h: 1 Words starting with t: 2 . Vocab . Procedure name- name of a function | Argument- stuff inputted after procedure name, used to outside function then called with the function with parameters | Procedure- a module of code that is created to complete a certain task, this is basically a function | Parameters- a variable that is used in a function to allow for data to be imported into a function | . . . var a = 3 . var b = 4 . add . subtract . multiply . divide . &lt;!-- function is called here --&gt; &lt;p&gt;var a = 3&lt;/p&gt; &lt;p&gt;var b = 4&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;add(a,b)&quot;&gt;add&lt;/button&gt; &lt;p id=&quot;result1&quot;&gt;&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;subtract(a,b)&quot;&gt;subtract&lt;/button&gt; &lt;p id=&quot;result2&quot;&gt;&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;multiply(a,b)&quot;&gt;multiply&lt;/button&gt; &lt;p id=&quot;result3&quot;&gt;&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;divide(a,b)&quot;&gt;divide&lt;/button&gt; &lt;p id=&quot;result4&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function add(a,b) { document.getElementById(&quot;result1&quot;).innerHTML = a + b // math } function subtract(a,b) { document.getElementById(&quot;result2&quot;).innerHTML = a - b } function multiply(a,b) { document.getElementById(&quot;result3&quot;).innerHTML = a * b // math } function divide(a,b) { document.getElementById(&quot;result4&quot;).innerHTML = a / b // math } // variables are defined var a = 3 var b = 4 &lt;/script&gt; .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/10/unit2-12-13.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/10/unit2-12-13.html",
            "date": " • Dec 10, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3.8 & 3.10",
            "content": "Unit 3.8 . Iteration: a repeating portion of an algorithm until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met Repeat Until: if the condition evaluates to true if a previous condition is true . Online shopping example: . . i=1 while i&lt;=5: print(i) i=i+1 . 1 2 3 4 5 . Unit 3.8.1 . An iteration is a repeating part of an algorithm that repeats through a specified number of times until an condition is met | Example of an iteration: iterating through number of tasks until they are done | . Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) . Program a simple iteration. | names = [&quot;Grace&quot;, &quot;John&quot;, &quot;Mort&quot;, &quot;Claire&quot;, &quot;Ronia&quot;, &quot;Nick&quot;] for name in names: print(&quot;Hi &quot; + name + &#39;!&#39;) . Hi Grace! Hi John! Hi Mort! Hi Claire! Hi Ronia! Hi Nick! . Unit 3.8.2 . iteration statement will execute a code as long as the a condition is True | iterative statements are used to execute a part of the program repeatedly as long as a given condition is True. What is an iteration statement, in your own words? Create a descending list of numbers using for loop Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 . for number in range(20, 0, -1): print(number) . 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 . i = 0 number = 3 while i &lt; 7: print(number) number += 13 i += 1 . 3 16 29 42 55 68 81 . Unit 3.10 . Find the lowest value in a list Use the list made below Make a variable to hold the minimum and set it to potential minimum value Loop Check each element to see if it is less than the minimum variable If the element is less than the minimum variable, update the minimum After all the elements of the list have been checked, display the minimum value . nums = [38, 45, 67, 83, 78] minimum = 100 for number in nums: if number &lt; minimum: minimum = number print(minimum) . 38 . AP College Board Reference Sheet . #assigns a list to a variable x &lt;- aList #assigns value of aList[i] to aList[j] aList[i] &lt;- aList[j] #any values in aList at indecies &gt;= i are shifted one position to the right. Length of list is increased by 1, value is plaed at index i in aList insert(aList, i, value) #appends aList in increased by 1, and value placed at end of aList append(aList, value) . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be added at the end of a list? append() Correct! What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! What returns the number of elements currently in a specific list? length() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/06/unit3-8-10.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/06/unit3-8-10.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 3.5-3.7",
            "content": "Unit 3.5 . Boolean: used to represent logical propositions, either true or false For example: there are clouds in the sky = True | . | Relational operators For example: age to get drivers license &gt; 16 | . | Logical Operators not: displays the opposite of whatever the data is | and: used to evaluate two conditions together | or: if one condition is met | . | . sad = False result = not(sad) print(result) . True . pass_test = True age = 18 if pass_test and age &gt;= 16: print(&quot;Congrats, you get your drivers license!&quot;) . Congrats, you get your drivers license! . score = 9 if score == 9 or score == 0: print(&quot;You did very well on the quiz!&quot;) . You did very well on the quiz! . Conditionals: allow for the expression of algorithms that utilize selection without a programming language | algorithm: the algorithm describes the instructions to complete a task, which done by the graphic with a list of instructions to do | Selection: Code that will execute depending on the algorithm condition returning true or false | Conditional Statement / If-Statement: Code that is initiated if a statement is true | . word = &quot;hello&quot; vowel_count = 0 for letter in word: if letter == &quot;a&quot; or letter == &quot;e&quot; or letter == &quot;i&quot; or letter == &quot;o&quot; or letter == &quot;u&quot;: vowel_count += 1 print(f&quot;The number of vowels is {vowel_count}.&quot;) . The number of vowels is 2 . def likes_count(list): if len(list) == 0: print(&quot;no one likes this&quot;) elif len(list) == 1: print(list[0] + &quot; liked this&quot;) elif len(list) == 2: print(list[0] + &quot; and &quot; + list[1] + &quot; liked this&quot;) elif len(list) == 3: print(list[0] + &quot;, &quot; + list[1] + &quot; and &quot; + list[2] + &quot; liked this&quot;) else: print(list[0] + &quot;, &quot; + list[1] + &quot; and 2 others liked this&quot;) list1 = [&quot;Grace&quot;, &quot;Claire&quot;, &quot;Annika&quot;] list2 = [&quot;Grace&quot;, &quot;Claire&quot;, &quot;Annika&quot;, &quot;John&quot;] likes_count(list1) likes_count(list2) . Grace, Claire and Annika liked this Grace, Claire and 2 others liked this . Unit 3.7 . . weather_sunny = True weather_rainy = False weather_cold = True weather_hot = False if weather_sunny: print(&quot;wear sunscreen&quot;) else: if weather_rainy: print(&quot;Bring an umbrella&quot;) else: if weather_cold: print(&quot;Wear a sweater&quot;) else: if weather_hot: print(&quot;Wear a tank top&quot;) else: print(&quot;Wear short sleeves&quot;) . wear sunscreen . if input(&quot;Do you like stem&quot;) == &quot;yes&quot;: if input(&quot;Do you like experiments or numbers&quot;) == &quot;numbers&quot;: print(&quot;You should take math&quot;) else: if input(&quot;do you like living things?&quot;) == &quot;yes&quot;: print(&quot;Take biology&quot;) else: print(&quot;take physics or chemistry&quot;) else: if input(&quot;Do you like learning about dead people or writng?&quot;) == &quot;writing&quot;: print(&quot;You should take english&quot;) else: print(&quot;You should take history&quot;) . You should take math . if input(&quot;Do you like Taylor Swift?&quot;) == &quot;yes&quot;: if input(&quot;What is your favorite album?&quot;) == &quot;folklore&quot;: print(&quot;Samzies&quot;) else: print(&quot;Ok, understandable&quot;) else: if input(&quot;Do you like Kanye West?&quot;) == &quot;yes&quot;: print(&quot;We can never be friends&quot;) else: print(&quot;Good, you should listen to TS&quot;) . if input(&quot;Are you interested in STEM?&quot;) == &quot;yes&quot;: print(&quot;You should take calculus, biology, chemistry, or physics&quot;) else: print(&quot;You should take APEC, APUSH, or AP Government&quot;) .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/04/unit3-5-7.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/04/unit3-5-7.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? . ValueError Traceback (most recent call last) /Users/gracewang/vscode/repository_1/_notebooks/2022-12-02-unit3-9-11.ipynb Cell 3 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2022-12-02-unit3-9-11.ipynb#W2sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; print(&#34;What Grade Did You Get?&#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2022-12-02-unit3-9-11.ipynb#W2sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; grade = int(input(&#34;Enter Grade:&#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2022-12-02-unit3-9-11.ipynb#W2sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; if grade &gt;= 90: &lt;a href=&#39;vscode-notebook-cell:/Users/gracewang/vscode/repository_1/_notebooks/2022-12-02-unit3-9-11.ipynb#W2sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(&#34;Wow! Good job!&#34;) ValueError: invalid literal for int() with base 10: &#39;&#39; . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 3.3-3.4",
            "content": "Hack 1 . algorithm: the algorithm describes the instructions to complete a task, which done by the graphic with a list of instructions to do . | sequencing: order of how to do something . Set item to number to search for | Get next number in list | If number = item, display &quot;item found&quot; | If more numbers in list, go back to step 2 | Display &quot;item not found | | selection If the number = item, the algorithm selects the item. . | iteration The iteration loops through the list to find all the numbers equal to the item . | Hack 2 . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . Hack 3 . 1 down: iteration . 2 down: selection . 3 across: sequence . . Notes . set of instruction that accomplishes a task | three part os algorithm: sequencing, selection, iteration | sequence: allows an algorithm to make a decision based on if a condition is met | iteration: a loop and performing a task until a condition is met . | arithmetic: addition, subtraction, multiplication, division, modulus . | strings: ordered sequences of characters . | examples of strings in pseudocode: len(str) | concat (str1, str2) | substring(str1, str2, length)- returns a substring of consecutive character from str 1 starting at the character at position &#39;start&#39; and containing &#39;length&#39; character | . | .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/11/30/unit3-3-4.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/11/30/unit3-3-4.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 3.1-3.2",
            "content": "Hacks Unit 3.1.1 . name = &quot;Grace&quot; #Uses an integer grade = 11 #Uses a list classes = [&quot;APUSH&quot;, &quot;APEL&quot;, &quot;CSP&quot;, &quot;AP Calculus&quot;] print(f&quot;Hi, my name is {name}. I am in {grade}th grade.&quot;) print(&quot;I am taking the classes&quot;) print(*classes, sep = &quot;, &quot;) . Hi, my name is Grace. I am in 11th grade. I am taking the classes APUSH, APEL, CSP, AP Calculus . Hacks Unit 3.1.2 . an assignment operator is a symbol that assigns a value to a variable | in College Board, the assignment variable is -&gt; | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? Answer: 22 | . Hacks Unit 3.2.1 . a list is a sequence of finite strings that surrounded by square brackets and separated by commas | an element is the individual strings in a list | the easiest way to reference an element is to index the list or string, which is done by list[0] | an example of a string is &quot;hello world&quot; | . foods = [&quot;pizza&quot;, &quot;watermelon&quot;, &quot;sushi&quot;, &quot;fried chicken&quot;] #index each element in the list for i in range(len(foods)): print(foods[i]) . pizza watermelon sushi fried chicken . Hacks 3.2.2 . num1 = input(&quot;Input a number. &quot;) num2 = input(&quot;Input a number. &quot;) num3 = input(&quot;Input a number. &quot;) add = input(&quot;How much would you like to add? &quot;) # Add code in the space below num1 = int(num1) num2 = int(num2) num3 = int(num3) numlist = [num1, num2, num3] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i-1] += int(add) print(numlist) . [7, 8, 9] . Hacks 3.2.3 . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, gracewang running /opt/homebrew/opt/python@3.10/bin/python3.10 You will be asked 4 questions. Question: Are you ready to take a test? Question: The purpose of lists and dictionaries are to manage the ____ of a program complexity is correct! Question: Lists are a form of data ______ abstraction is correct! Question: Which brackets are used to assign values to a variable to make a list? [] is correct! gracewang you scored 3/4 . foods = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwich&quot;] print(*foods, sep=&quot; &quot;) . pizza hot dog sushi strawberry sandwich . lists are better to use than strings in some cases because it reduces clutter, for example, if you wanted to print all the items in a list, typing the previous example out would require 6 lines while the simplified line only requires 2 | . class1 = &quot;CSP&quot; class2 = &quot;APEL&quot; class3 = &quot;APUSH&quot; class4 = &quot;AP Calc BC&quot; class5 = &quot;AP Physics&quot; print(class1, class2, class3, class4, class5) #short way classes = [&quot;CSP&quot;, &quot;APEL&quot;, &quot;APUSH&quot;, &quot;AP Calc BC&quot;, &quot;AP Physics&quot;] print(*classes, sep=&quot; &quot;) . CSP APEL APUSH AP Calc BC AP Physics CSP APEL APUSH AP Calc BC AP Physics . Notes . Must Knows: . Variable: abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | . | there are a variety of methods to represent data, called data types, which are referenced using variables Booleans | integers | lists | strings | . | Collegeboard uses &lt;– as the assignment operator (useful for MC) this is = in Python | . | . s = &quot;string&quot; integer = 5 boolean = True . list = [&quot;banana&quot;, &quot;strawberry&quot;, &quot;apples&quot;] #index list print(&quot;The command List[1] prints: &quot; + list[1]) print(&quot;The command List[-1] prints: &quot; + list[-1]) . The command List[1] prints: strawberry The command List[-1] prints: apples .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/11/28/unit3-1-2.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/11/28/unit3-1-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Trimester 1 College Board",
            "content": ". Test Corrections . . Using Jupyter Notebook, I was able to visualize the code better with an actual output. I thought that having y = False would print “False” but if the if-statement was false, the statement would not print anything. . . The code first obtains the first index of the list using the variable j. Then it gets another variable k in order to index the other numbers in the rest of the list. The index of the list include len(myList) - 1. The second while loop repeats while changing k and comparing it to the myList(j). The while loop goes on until all the values in the list are looped through. . . Again, I used Jupyter Notebook to visualize the code. I did not realize that the thirdList had been set to firstList. Then, because secondList was set in thirdList, the secondList = firstList. . Topics to work on: . The Internet . packet: a small amount of data sent over a network; each packet includes the source and destination information . computer system: a group of computing devices and programs working together for a joint purpose . computer network: a group of interconnected computing devices capable of sending or receiving data . packet switching: the message (file) is broken up into packets and sent in any order and are reassembled by the recipient’s device . routing: process of finding a path from sender to receiver . path: a sequence of directly connected computing devices that begins at the sender and ends at the receiver . bandwidth: max amount of data that can be sent in a fixed amount of time on a computer network . OSI (Open Systems Interconnect): lays to go through to communicate . TCP (Transmission Control Protcol): establishes a common standard for how to send messages between devices on the internet . Internet Engineering Task Force (IETF): manages the development of standards + technical discussions concerning the internet in an open and collaborative process . . Network Access: hardware related, most common is ethernet . Internet: packets of data + metadata are being transmitted w/ info used for routing information . internet designed to be scalable- able to change in size and scale to meet demands | Local Area Network (LAN)- physical connections | Autonomous Systems (AS)- large intranets linked together under control and policies of major organizations | the internet- autonomous systems linked together | . Transport layer: communicate with hardware and software on the rest of the internet . FCP (error check + recovery, slower) and UDP (error check, then discard) | . Application: giving a domain name . DNS | https is http w/ security | . . Binary Numbers . .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/11/08/cb_screenshot.html",
            "relUrl": "/trimester%201/2022/11/08/cb_screenshot.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Night at the Museum",
            "content": ". Our project at night at the museum was Taylor Swift album encyclopedia. . Our team had the most trouble with the backend and connecting it to the frontend. I was the DevOps of the team and also worked on backend and frontend. I created the backend files which are accessible by the link http://musicmania.nighthawkcodescrums.gq/api/music/taylor and http://musicmania.nighthawkcodescrums.gq/api/music/like/”album”. . . Although we were able to make the backend, we were unable to connect the backend to the front end using fetch commands and JavaScript. The main problem was that our team did not know how to code in JavaScript. This is an aspect we can improve on next trimester. . At Night at the Museum, we presented our project to multiple parents, Mr. Mort, and Mr. Yeung. While we were presenting, many people were not Taylor Swift fans or knew of her songs. Thus, next time, we could develop a website that could appeal to a wider demographic, such as including more music options and more artists. .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/11/07/natm.html",
            "relUrl": "/trimester%201/2022/11/07/natm.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Project Design",
            "content": "Program Purpose and Function . Purpose: To create a language translator Input: Artist Name and Album Output: Album duration, album song names, number of songs, album cover photo The purpose of this program is to provide users with data about their favorite artists including their albums, songs, and album duration and allow them to choose their favorite artists. . Roles: . Grace: Dev-Ops Amitha: Frontend Claire: Backend Tanisha: Backend . Managing Complexity . Use a function to read user input and only provide wanted album information allowing user to use favorites tab to organize the artists they enjoy . Procedural Abstraction . using artist[album], retrieve only wanted data from the dictionary. call developed function to run based on user input. . Algorithm Implementation . Develop algorithm to count number of songs in album given API data Algorithm to create ‘favorite artists’ tab, where users can select their favorite artists to be saved in a seperate section of the application . Testing . Input multiple artists and album. See if each selected data type displays proper data. Add artists to ‘favorites’ and see if that data is stored . API . Using API: Translator Using API: API for Music . .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/10/08/project-design.html",
            "relUrl": "/trimester%201/2022/10/08/project-design.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Deployment",
            "content": "Deployment Process . Connect to EC2 instance on AWS . | Clone directory git clone https://github.com/gwang1224/flask_portfolio.git . | Edit dockerfile FROM docker.io/python:3.9 WORKDIR /app # Update environment and install python and pip RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git # Copy repo you updated with clone or pull COPY . /app # Install project specific dependencies RUN pip3 install --no-cache-dir -r requirements.txt RUN pip3 install gunicorn # Setup args to run 3 workers and run on port 8080 ENV GUNICORN_CMD_ARGS=&quot;--workers=3 --bind=0.0.0.0:8080&quot; # Allow port 8080 to be accessed by system EXPOSE 8080 # Run Web Application in production style CMD [ &quot;gunicorn&quot;, &quot;main:app&quot; ]` . | Edit docker-compose file version: &#39;3&#39; services: web: image: flask_grace build: . ports: - &quot;8087:8080&quot; volumes: - persistent_volume:/app/volumes volumes: persistent_volume: driver: local driver_opts: o: bind type: none device: /home/ubuntu/flask_portfolio/volumes . 3 things to change: . image: flask_grace | port (must be a different port than group in same AWS server) | device (must be the repo name and directory) | . | Installing and using docker sudo apt install docker sudo apt install docker-compose -y sudo docker-compose up -d . | To check port is running run any of these sudo docker-compose ps sudo docker ps sudo docker images sudo docker volume ls . | Testing localhost endpoint curl http://localhost:8087 . | . To connect to internet with IP sudo apt install nginx cd /etc/nginx/sites-available sudo nano test . Change test config file . server { listen 80; listen [::]:80; server_name 18.222.129.80; location / { proxy_pass http://localhost:8087; # Simple requests if ($request_method ~* &quot;(GET|POST)&quot;) { add_header &quot;Access-Control-Allow-Origin&quot; *; } # Preflight requests if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Origin&quot; *; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, HEAD&quot;; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Authorization, Origin, X-Requested-With, Content-Type, Accept&quot;; return 200; } } } . Note: change server name and port . | Test with public IP address on internet | . .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/10/02/deployment.html",
            "relUrl": "/trimester%201/2022/10/02/deployment.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "JavaScript",
            "content": "function logIt(output) { console.log(output); } . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain course, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Course function Course(course, teacher, room_num) { this.course = course; this.teacher = teacher; this.room_num = room_num; } // define a setter for role in Course data // Course.prototype.setRole = function(role) { // this.role = role; // } // define a JSON conversion &quot;method&quot; associated with Course Course.prototype.toJSON = function() { const obj = {course: this.course, teacher: this.teacher, room_num: this.room_num, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Course and assign to variable teacher var teacher = new Course(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Course { course: &#39;Mr M&#39;, teacher: &#39;jm1021&#39;, room_num: 1977 } string ; {&#34;course&#34;:&#34;Mr M&#34;,&#34;teacher&#34;:&#34;jm1021&#34;,&#34;room_num&#34;:1977} . // define a student Array of Person(s) var students = [ new Course(&quot;AP Physics&quot;, &quot;Mr. Liao&quot;, &quot;K105&quot;), new Course(&quot;AP Calculus BC&quot;, &quot;Mrs. Lanzi&quot;, &quot;G104&quot;), new Course(&quot;AP English Language&quot;, &quot;Mrs. Dafoe&quot;, &quot;G112&quot;), new Course(&quot;AP Computer Science Principles&quot;, &quot;Mr. Mortensen&quot;, &quot;A101&quot;), new Course(&quot;AP US History&quot;, &quot;Mr. Swanson&quot;, &quot;L116&quot;) ]; // logIt(students) // define a schedule and build schedule objects and json function schedule(teacher, students){ // 1 teacher, many student // start schedule with Teacher // teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.schedule = [teacher]; // add each Student to schedule this.students = students; // this.students.forEach(student =&gt; { students.setRole(&quot;2022&quot;); this.schedule.push(student); }); // build json/string format of schedule this.json = []; this.schedule.forEach(person =&gt; this.json.push(person.toJSON())); this.students.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci schedule from formerly defined teacher and students compsci = new schedule(teacher, students); // output of Objects and JSON in CompSci schedule logItType(compsci.students); // constructed schedule object logItType(compsci.students[0].course); // abstract 1st objects course logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Course { course: &#39;AP Physics&#39;, teacher: &#39;Mr. Liao&#39;, room_num: &#39;K105&#39; }, Course { course: &#39;AP Calculus BC&#39;, teacher: &#39;Mrs. Lanzi&#39;, room_num: &#39;G104&#39; }, Course { course: &#39;AP English Language&#39;, teacher: &#39;Mrs. Dafoe&#39;, room_num: &#39;G112&#39; }, Course { course: &#39;AP Computer Science Principles&#39;, teacher: &#39;Mr. Mortensen&#39;, room_num: &#39;A101&#39; }, Course { course: &#39;AP US History&#39;, teacher: &#39;Mr. Swanson&#39;, room_num: &#39;L116&#39; } ] string ; AP Physics string ; {&#34;course&#34;:&#34;Mr M&#34;,&#34;teacher&#34;:&#34;jm1021&#34;,&#34;room_num&#34;:1977} object ; { course: &#39;Mr M&#39;, teacher: &#39;jm1021&#39;, room_num: 1977 } . // define an HTML conversion &quot;method&quot; associated with schedule schedule.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:green;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;course&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Teacher&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; // body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.schedule for (var row of compsci.students) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.course + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.teacher + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.room_num + &quot;&lt;/td&gt;&quot;; // body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . courseTeacherClass Of . AP Physics | Mr. Liao | K105 | AP Calculus BC | Mrs. Lanzi | G104 | AP English Language | Mrs. Dafoe | G112 | AP Computer Science Principles | Mr. Mortensen | A101 | AP US History | Mr. Swanson | L116 | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/09/25/java_script.html",
            "relUrl": "/trimester%201/2022/09/25/java_script.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "1.1 Collaboration",
            "content": "CSP Team Collaboration . Think-Pair-Share: Team collaboration . Notes . Facebook has areas where people can sit together and collaborate. | A computing innovation includes a program as an integral part of its function | A computing innovation can be physical, nonphysical computing software, or a nonphysical computing concept | Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations ex. Super Mario Bro 2 vs. Super Mario Bro 3 | . | interpersonal skills learned through collaboration communication | consensus building | conflict resolution | negotiation | . | Pair programming: two programmers work together as a pair. One driver writes the program code, while the other observer reviews each line of program as it is typed it | Think-Pair-Share: Students think through a problem alone, pair with a partner to share, and then share results with the class | leave comments in code! communicates to partner and yourself | acknowledge code segments/media used from other sources | clarify functionality | . | How to collaborate repl.it | GitHub | Shared document/folder | feedback | . | .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/09/10/collaboration.html",
            "relUrl": "/trimester%201/2022/09/10/collaboration.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . #collapse-output # Sample of Python Variables # variable of type string name = &quot;Grace Wang&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 100 print(&quot;score&quot;, score, type(score)) # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;R&quot;, &quot;C&quot;, &quot;html&quot;, &quot;linux&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . . name Grace Wang &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 100 &lt;class &#39;int&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;R&#39;, &#39;C&#39;, &#39;html&#39;, &#39;linux&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Grace Wang&#39;, &#39;age&#39;: 16, &#39;score&#39;: 100, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;R&#39;, &#39;C&#39;, &#39;html&#39;, &#39;linux&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Grace Wang &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . #collapse-output # Define an empty List called InfoDb InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Grace&quot;, &quot;LastName&quot;: &quot;Wang&quot;, &quot;DOB&quot;: &quot;September 2&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;gracewang187@gmail.com&quot;, &quot;Owns_Cars&quot;: &quot;None&quot; }) # Print the data structure print(InfoDb) . . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Grace&#39;, &#39;LastName&#39;: &#39;Wang&#39;, &#39;DOB&#39;: &#39;September 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;gracewang187@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;None&#39;}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . #collapse-output # given and index this will print InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Grace Wang Residence: San Diego Birth Day: September 2 Cars: N, o, n, e . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . #collapse-output # while loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Grace Wang Residence: San Diego Birth Day: September 2 Cars: N, o, n, e . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . #collapse-output # recursion simulates loop incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Grace Wang Residence: San Diego Birth Day: September 2 Cars: N, o, n, e . My Own Dictionary . pip install pandas . Requirement already satisfied: pandas in /opt/homebrew/lib/python3.10/site-packages (1.4.4) Requirement already satisfied: numpy&gt;=1.21.0 in /opt/homebrew/lib/python3.10/site-packages (from pandas) (1.23.2) Requirement already satisfied: pytz&gt;=2020.1 in /opt/homebrew/lib/python3.10/site-packages (from pandas) (2022.2.1) Requirement already satisfied: python-dateutil&gt;=2.8.1 in /opt/homebrew/lib/python3.10/site-packages (from pandas) (2.8.2) Requirement already satisfied: six&gt;=1.5 in /opt/homebrew/lib/python3.10/site-packages (from python-dateutil&gt;=2.8.1-&gt;pandas) (1.16.0) Note: you may need to restart the kernel to use updated packages. . import pandas as pd . data = { &#39;Dates&#39;: [&quot;8/17/22&quot;, &quot;8/18/22&quot;, &quot;8/19/22&quot;, &quot;8/20/22&quot;, &quot;8/21/22&quot;, &quot;8/22/22&quot;, &quot;8/23/22&quot;, &quot;8/24/22&quot;, &quot;8/25/22&quot;, &quot;8/26/22&quot;, &quot;8/27/22&quot;, &quot;8/28/22&quot;, &quot;8/29/22&quot;, &quot;8/30/22&quot;, &quot;8/31/22&quot;, &quot;9/1/22&quot;, &quot;9/2/22&quot;, &quot;9/3/22&quot;, &quot;9/4/22&quot;, &quot;9/5/22&quot;], &#39;Hours&#39;: [8.5, 6.5, 7, 7, 9, 7, 12.5, 8, 8, 8, 8.5, 9, 8, 8, 7, 7, 6, 8, 9, 6.5] } . def add_sleep_data(): print(&quot;Add a day (Enter date in MM/DD/YY format): &quot;) day = input() print(&quot;How many hours did you sleep? &quot;) hours = input() # print(data[&quot;Dates&quot;]) data[&quot;Dates&quot;].append(day) data[&quot;Hours&quot;].append(hours) print(&quot;You added &quot; + day + &quot; : &quot; + hours) print(&quot;Here is your updated sleep data&quot;) df_by_days = pd.DataFrame(data) print(df_by_days) add_sleep_data() . Add a day (Enter date in MM/DD/YY format): How many hours did you sleep? You added 9/6/22 : 9 Here is your updated sleep data Dates Hours 0 8/17/22 8.5 1 8/18/22 6.5 2 8/19/22 7 3 8/20/22 7 4 8/21/22 9 5 8/22/22 7 6 8/23/22 12.5 7 8/24/22 8 8 8/25/22 8 9 8/26/22 8 10 8/27/22 8.5 11 8/28/22 9 12 8/29/22 8 13 8/30/22 8 14 8/31/22 7 15 9/1/22 7 16 9/2/22 6 17 9/3/22 8 18 9/4/22 9 19 9/5/22 6.5 20 9/6/22 9 . data2 = {} for hours in data[&quot;Hours&quot;]: data2[hours] = 0 def print_hour_freq(data, freq_dict): i = 0 while i &lt; len(data): for key in freq_dict.keys(): if data[i] == key: freq_dict[key] += 1 i += 1 print(freq_dict) print_hour_freq(data[&quot;Hours&quot;], data2) . {8.5: 2, 6.5: 2, 7: 5, 9: 3, 12.5: 1, 8: 6, 6: 1, &#39;9&#39;: 1} . df_by_days = pd.DataFrame(data) print(df_by_days) . Dates Hours 0 8/17/22 8.5 1 8/18/22 6.5 2 8/19/22 7 3 8/20/22 7 4 8/21/22 9 5 8/22/22 7 6 8/23/22 12.5 7 8/24/22 8 8 8/25/22 8 9 8/26/22 8 10 8/27/22 8.5 11 8/28/22 9 12 8/29/22 8 13 8/30/22 8 14 8/31/22 7 15 9/1/22 7 16 9/2/22 6 17 9/3/22 8 18 9/4/22 9 19 9/5/22 6.5 20 9/6/22 9 . df_by_days[&#39;Hours&#39;] = df_by_days[&#39;Hours&#39;].astype(float) df_by_days.dtypes . Dates object Hours float64 dtype: object . df_by_days.plot(x = &quot;Dates&quot;, y = &quot;Hours&quot;, kind = &quot;line&quot;, color = &quot;pink&quot;) . &lt;AxesSubplot:xlabel=&#39;Dates&#39;&gt; . Python Quiz with Dictionaries . score = 0 question_answer = { &quot;What command defines a function or method?&quot;: &quot;def&quot;, &quot;What conditionally executes a block of code, along with else and elif?&quot;: &quot;if statement&quot;, &quot;What does a jupyter notebook end in?&quot;: &quot;ipynb&quot;, &quot;What is style of programming characterized by the identification of classes of objects closely linked with the methods?&quot;: &quot;object oriented programming&quot;, &quot;What is the text at the front of a markdown post called?&quot;: &quot;front matter&quot; } def ask_question(question, answer): &quot;&quot;&quot;Asks question and determines if &quot;&quot;&quot; print(question) user_answer = ask_for_answer() is_answer_right(user_answer, answer) def ask_for_answer(): &quot;&quot;&quot;Asks for an input from the user and returns user answer&quot;&quot;&quot; answer = input().lower() print(answer) return answer def is_answer_right(user_answer, answer): &quot;&quot;&quot;Inputs user answer and actual answer and adds to score if answer is right&quot;&quot;&quot; global score if user_answer == answer: score += 1 print(f&quot;Good job! The answer is {answer}!&quot;) else: print(f&quot;Sorry, incorrect 😢. The right answer was {answer}.&quot;) print(f&quot;Your score is {score}.&quot;) . print(&quot;Welcome to Grace&#39;s Quiz!&quot;) start = input(&quot;Do you want to take Grace&#39;s Quiz?&quot;) #Start game dialogue if start.lower() == &quot;yes&quot; or start.lower() == &quot;y&quot;: print(&quot;Great! Good luck 😊&quot;) else: print(&quot;Take a mindful minute. You got this :)&quot;) print(&quot;This game will have 5 questions!&quot;) i = 0 #Loop to ask questions while i &lt; len(question_answer): answer = list(question_answer.values())[i] question = list(question_answer.keys())[i] ask_question(question, answer) i += 1 #Prints a message depending on what score user got if score == 5: print(&quot;Wow! You know your stuff! Keep up the good work! 🤗&quot;) if score == 4: print(&quot;Almost! Try again.&quot;) if score &lt;= 3: print(&quot;You&#39;re average 😐 &quot;) . Welcome to Grace&#39;s Quiz! Great! Good luck 😊 What command defines a function or method? def Good job! The answer is def! Your score is 1. What conditionally executes a block of code, along with else and elif? if statement Good job! The answer is if statement! Your score is 2. What does a jupyter notebook end in? ipynb Good job! The answer is ipynb! Your score is 3. What is style of programming characterized by the identification of classes of objects closely linked with the methods? object oriented programming Good job! The answer is object oriented programming! Your score is 4. What is the text at the front of a markdown post called? object oriented programming Sorry, incorrect 😢. The right answer was front matter. Your score is 4. Almost! Try again. .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/08/30/python_lists.html",
            "relUrl": "/trimester%201/2022/08/30/python_lists.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Panel Notes",
            "content": "12/13/2022 Girls in CS Panel . Kathyleen Beveridge . Works on financing side . HP Inc: Here at HP we are committed to innovating and reinventing your digital life. | Qualcomm: We make innovative products powered by ingenuity. | Thermo Fisher Scientific: To enable our customers to make the world healthier, cleaner and safer. | All statements promote innovation in technology and using technology for the public good | Roles of scrum master are in corporations, project management is important to bring product to consumer to make | surfing doesn’t earn you money | Data scientists can predict where sales can be | Kris Porter . Software Engineer, SRE, DevOps . UCLA for electrical Engineering | Center for Embedded Network Sensors Costa Rico in scanning environmental systems | . | Intro to DevOps (ensures security of websites, etc), transition to Qualcomm | Currently working at Twitter | Continuous Learning highlights deep learning at Qualcomm | data structures + algorithms | machine learning | system design for interviews | . | Projects streaming media infrastructure | analytics | . | Questions: . Agile Methodology in industry? | sprints: What can we do in 1 month? 3 months? | companies shuffling = go find a opportunities for a job | machine learning runs experiments using NBS and could see analytics on the code that people are downloading to remove unused repositories (can delete unused repositories to save Qualcomm money) | what is a skill most useful in the tech industry? continuous learning | have good listening skills and be able to translate to layman terms | recognize how to use technology to solve real life skills | . | whats the biggest challenge? be adaptive can always rise to top | interviews are hard (are random timed tests) | . | work life balance: depends on the company | . 8/29/2022 Alumni Meeting . Question 1: How did you realize what you want to major in? . Coding requires problem-solving, and problem solving is fun! | Coding is very applicable one alumni is majoring in cognitive machine learning (psychology + comp sci) 😲 | . | Take school classes if you like CSP, then take CSA and see if it is something you truly want to do | . | Try internships to see if you genuinely like programming | Try robotics! | Take extra classes in your areas of interest | Qusetion 2: What is the biggest challenge you’ve encountered with computer science? . GitHub is sometimes confusing | Staying motivated | Comp Sci may be competitive Find your own path, make your own projects, don’t get caught up with what everybody else does, who cares what everybody else is doing? | . | Transition from high school to college is hard | Starting is hard | Don’t cut corners and do the work It’ll be better for you in the long run | . | Question 3: Are there any PBL scenarios is college CS classes? . Note: PBL = Project-Based Learning . College is a mix of PBL and tests | Studying in groups is helpful | Question 4: How have you applied CS in your major if you are not majoring in CS? . Word doc → spreadsheet | Copy-pasting | Matlab | Coding is helpful for analysis | Question 5: What internships/jobs did the alumni have? . Northrop Grumman | LG | Code Ninja | Club at UCSD: Triton AI | . Have a good resume!",
            "url": "https://gwang1224.github.io/repository_1/alumni%20meetings/2022/08/29/alumni-meeting.html",
            "relUrl": "/alumni%20meetings/2022/08/29/alumni-meeting.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Tool Check",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/repository_1 # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/gwang1224/repository_1.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /Users/gracewang/vscode exists. Directory /Users/gracewang/vscode/repository_1 exists. . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/hacks # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /Users/gracewang/hacks does not exists... makinng directory /Users/gracewang/hacks Directory /Users/gracewang/hacks exists. Directory /Users/gracewang/hacks/APCSP does not exists... cloning https://github.com/nighthawkcoders/APCSP.git Cloning into &#39;APCSP&#39;... remote: Enumerating objects: 9627, done. remote: Counting objects: 100% (1202/1202), done. remote: Compressing objects: 100% (454/454), done. remote: Total 9627 (delta 752), reused 1171 (delta 722), pack-reused 8425 Receiving objects: 100% (9627/9627), 16.53 MiB | 16.57 MiB/s, done. Resolving deltas: 100% (5247/5247), done. Directory /Users/gracewang/hacks/APCSP exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls . Navigate to project, then navigate to area wwhere files were cloned /Users/gracewang/vscode/repository_1 list top level or root of files with project pulled from github 2022-05-15-07-21-16.png _config.yml _sass 2022-05-15-07-24-25.png _fastpages_docs _word 2022-05-15-07-25-15.png _includes assets Gemfile _layouts docker-compose.yml LICENSE _notebooks images Makefile _pages index.html README.md _plugins _action_files _posts . python --version python2 --version . Python 3.9.12 Python 2.7.18 . echo &quot;Jupyter Check&quot; test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Jupyter Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/gracewang/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e bash /Users/gracewang/Library/Jupyter/kernels/bash javascript /Users/gracewang/Library/Jupyter/kernels/javascript python3 /Users/gracewang/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/08/28/bash_tutorial.html",
            "relUrl": "/trimester%201/2022/08/28/bash_tutorial.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Calculus Bc Calendar",
            "content": "Week Monday Tuesday Wednesday Thursday Friday . 0 | August 15 | 16 | First Day of School 17 | 18 | 19 | . | | | Welcome to AP Calculus BC! . Unit 1 HW 1: . Read Finding the Glory in the Struggle and Post Reflection to Canvas Discussion Board (Discussion Closes 11:59 pm 8/21/2022) . *Classes about 51 minutes . | Begin Unit 1: Functions and Limits . 1.1: Domain . 2.2: An Intro to the Limit of a Function . Notes Template . Class Notes . Unit 1 HW 2: . p. 12 1.1: #9, 17, 23-29 . p. 102 2.2: #5, 10, 12, 23 . Worked Out Solutions . | 1.1: Absolute Value . 2.3: Calculating Limits Using the Limit Laws . Notes Template . Class Notes . Unit 1 HW 3: . p. 14 1.1: # 41, 64, 67 . p. 114 2.3: # 7-9, 11, 19, 25, 34, 36, 41 . Worked Out Solutions . | . 1 | 22 | 23 | 24 | 25 | 26 | . | 2.3: Squeeze Theorem . 3.5: Limits of Trigonometric Functions . Notes Template . Class Notes . Unit 1 HW 4: . p. 115 2.3: # 48, 50, 52 . p. 224 3.5: #29-37 . Worked Out Solutions . | 2.4: Limits at Infinity and Horizontal Asymptotes . Notes Template . Class Notes . Unit 1 HW 5: . p. 128 2.4: #13, 18, 23, 28, 38, 42, 54, 58, 80 . Worked Out Solutions . | 2.5: Continuity . Notes Template . Class Notes . Unit 1 HW 6: . p. 143 2.5: # 32-34, 37, 46, 47, 50, 57 . Worked Out Solutions . AND Squeeze Theorem Fun Worksheet 😊 . Solutions . Print Unit 1 Closure Activity and Bring to Class . | Check for Understanding: . Limits and Intermediate Value Theorem . Peer Review . Unit 1 Closure Activity . Unit 1 HW 7: . Complete Unit 1 Closure Core Problems: . 1.1, 1.3(d-h,j,l,m,o), 2.1, 3.1, 4.2, 4.3, 4.4, 4.5, 5.2 b . Worked Out Solutions . | Begin Unit 2: The Derivative . 3.1 &amp; 3.2: The Derivative . Notes Template . Class Notes . Unit 2 HW 1: . p. 173 3.1: # 4, 14, 15, 28, 59, 61, 75 . p. 188 3.2: # 11, 24, 35, 42, 56, 67 . Worked Out Solutions . | . 2 | 29 | 30 | 31 | September 1 | 2 | . | 3.3 &amp; 3.4: Rules of Differentiation . Class Work: . p. 203 3.3: #84, 92, 101, 106 . p. 213 3.4: #66, 68, 75 . Worked Out Solutions . Unit 2 HW 2: . Finish Class Work . p. 203 3.3: # 44, 49, 81 . p. 213 3.4: #34, 44, 55, 56, 63 . Worked Out Solutions . | 3.5: Derivatives of Trigonometric Functions . Notes Template . Class Notes . Unit 2 HW 3: . p. 223 3.5: # 5, 6, 11, 13, 15, 39, 41, 47, 59, 67 . Worked Out Solutions . | 3.6: The Chain Rule . Chain Rule Fun Worksheet 😊 . Unit 2 HW 4: . Finish Chain Rule Fun Worksheet 😊 . Worked Out Solutions . | Test 1 . Functions, Limits, Continuity, and Rates of Change . | 3.7: Implicit Differentiation and Derivatives of Inverse Functions . Notes Template . Class Notes 1/Class Notes 2 . Unit 2 HW 5: . p. 248 3.7: #22, 36, 55, 69, 102, 104, 108, 112, 113 AND . Inverse Functions Fun Worksheet 😊 #7, 10, 13 . Worked Out Solutions (Text) . Worked Out Solutions (Worksheet) . | . 3 | Labor Day September 5 | 6 | 7 | 8 | 9 | . | Holiday - No School 😊 | 3.7: Inverse Trigonometric Functions and Their Derivatives . Notes Template . Class Notes . Unit 2 HW 6: . p. 248 3.7: #41-48, 68, 70-72 . Worked Out Solutions . | 3.8: Derivatives of Logarithmic and Exponential Functions; Logarithmic Differentiation . Notes Template . Class Notes . Unit 2 HW 7: . p. 259 3.8: #18, 28, 31, 33, 41, 44, 47, 52, 68, 72, 76 . Worked Out Solutions . Print Unit 2 Closure Activity and Bring to Class . | Check for Understanding: Derivatives . Differentiability, Inverse Functions &amp; Derivatives (Table/Graph), &amp; Logarithmic Differentiation . Unit 2 Closure Activity . Unit 2 HW 8: . Unit 2 Closure Learning Targets 1.1, 1.3, 2.1, 3.1, 3.2, 4.1, 5.1 . | Peer Review . Unit 2 Closure Activity . Unit 2 HW 9: . Complete Unit 2 Closure . Learning Targets 4.2 (a-h, l), 7.1, 8.1, 8.2 . Worked Out Solutions - Don’t Peek Too Soon!!! . | . Week Monday Tuesday Wednesday Thursday Friday . 4 | 12 | Back to School Night 13 | 14 | 15 | 16 | . | Begin Unit 3 . 3.9: Applications of the Derivative . Rectilinear Motion Screencast . Notes Template . Class Notes . Unit 3 HW 1: . p. 270 3.9: #1, 5, 8, 22 . Worked Out Solutions . Watch Related Rates Screencast and Use Notes Template to Take Notes . | 3.10: Related Rates . Related Rates Fun Worksheet☺ . Unit 3 HW 2: . Related Rates Fun Wksht 😊 . Worked Out Solutions . | 3.11: Local Linearity . Notes Powerpoint . Unit 3 HW 3: . p. 285 3.11 #6, 12, 17, 19-22 . Worked Out Solutions . | Test 2 . Functions, Limits, and Differentiation . | 4.1: Maximum and Minimum Values (Relative) . Notes Template . Class Notes . Unit 3 HW 4: . p. 303 4.1 #35, 40, 49, 72, . 79(skip part d), 91 . Worked Out Solutions . Watch Extreme Value Theorem and Absolute Extrema Screencast and Use Notes Template to Take Notes . | . 5 | Professional Development 19 | 20 | 21 | 22 | 23 | . | No School for Students | 4.1: Maximum and Minimum Values (Absolute) . Class Work: . p. 303 4.1 #10, 12, 16, 18, 44, 48, 50, 62, 65, 66, 68, 70, 71, 80, 81, 88 . Unit 3 HW 5: . Finish Classwork . Worked Out Solutions . | 4.2: Mean Value Theorem . Notes Template . Class Notes . Unit 3 HW 6: . p. 313 4.2 #1, 5, 11, 13, 15, 19, 29, 30, 35, 46 . Worked Out Solutions . | 4.3: How Derivatives Affect the Shape of a Graph . 4.5: Summary of Curve Sketching . Notes Template . Class Notes . Unit 3 HW 7: . Function Analysis &amp; Curve Sketching Fun Worksheet 😊 . #1, 2 (c only), 4, 5, 6, 8, 10 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . Applications of the Derivative . | Function Analysis . | . Peer Review . Unit 3 HW 8: . Watch Optimization Screencast &amp; Use Notes Template to Take Notes . p. 374 4.6 #1, 5 (find MAXIMUM), 9, 13, 18 . Worked Out Solutions . | . 6 | 26 | 27 | 28 | 29 | End of 1st 6-Weeks 30 | . | 4.6: Optimization Problems . Class Work: . p. 374 4.6 #7, 14, 15, 20, 22, 25, 27, 34, 42, 46, 49 . *Core Problems highlighted in yellow . Unit 3 HW 9: . Finish Classwork . Print Unit 3 Closure Activity and Bring to Class . Worked Out Solutions . | Unit 3 Closure Activity . Unit 3 HW 10A: . Unit 3 Closure Activity . Learning Targets 1.1, 2.1, 3.1, 3.2, 3.3, 4.1 . Solutions Part I . | Unit 3 Closure Activity . Unit 3 HW 10B: . Unit 3 Closure Activity . Learning Targets: 4.2, 4.3, 5.1, 6.1, 6.2 . Solutions Part II . Optional: Extra Practice Fun Worksheet #1a, 2-4, 6 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . MVT . | Related Rates . | Optimization . | . Peer Review . Begin Unit 4: Integration . 5.1: Antiderivatives . Notes Powerpoint . Unit 4 HW 1: . p. 392 5.1 #19, 21, 22, 26, 28, 41, 46, 56, 58, 63, 74 . Worked Out Solutions . | 5.2: Riemann Sums . Notes Template . Class Notes . Unit 4 HW 2: . p. 410 5.2 #9, 15, 16, 21-23, 32, 33 . Worked Out Solutions . | . 7 | October 3 | Grades Due/Tri 1 Conferences 4 | 5 | Parent Conferences 6 | Homecoming Parade 7 | . | 5.2: Area as a Limit . Notes Template . Class Notes . Unit 4 HW 3: . p. 410 5.2 #34, 36, 38-40, 42, 43, 44 . Worked Out Solutions . | 5.3: The Definite Integral . Notes Template . Class Notes . Unit 4 HW 4: . p. 428 5.3 #27, 29, 32, 41, 43, 47, 53, 60, 67 . Worked Out Solutions . *Classes about 46 minutes . | Test 3 FR . Functions, Limits, Differentiation, Applications of Differentiation . HW: . No Homework ☺ . | Test 3 MC . Functions, Limits, Differentiation, Applications of Differentiation . *Classes about 46 minutes . | 5.4: The Fundamental Theorem of Calculus . Notes Template . Class Notes . Unit 4 HW 6: . p. 441 5.4 #7, 11, 17, 23, 27, 33, 36, 43, 49, 50, 55, 68, 79 . Worked Out Solutions . *Classes about 67 minutes . | . Week Monday Tuesday Wednesday Thursday Friday . 8 | 10 | 11 | 12 | 13 | 14 | . | 5.4: The Fundamental Theorem of Calculus . Unit 4 HW 7: . Fundamental Theorem of Calculus Fun Worksheet 😊 . Worked Out Solutions . | 5.5: Indefinite Integrals . Notes PowerPoint . Unit 4 HW 8: . p. 454 5.5 #16, 20, 22, 36, 42, 45, 58, 60, 62, 66, 68, 70, 75, 77, 82 . Worked Out Solutions . | 5.6: Method of Substitution . Notes Template . Class Notes . Unit 4 HW 9: . p. 467 5.6 #22, 26, 28, 31, 33, 42, 52, 54, 67, 72, 73, 77, 84 . Worked Out Solutions . | Check for Understanding: Integration . Limit Definition of Definite Integral . | Fundamental Theorem of Calculus . | . Extra Practice . Functions Defined as Definite Integrals Worksheet . Unit 4 HW 10: . Finish Classwork . Worked Out Solutions (Ignore #1) . | Peer Review . Extra Practice . Riemann Sum to Definite Integral . Integration . Unit 4 HW 11: . Riemann Sum to Definite Integral Fun Wksht (All) AND Integration Fun Wksht 😊 #7, 11, 13, 14, 15, 16, 20 AND Print Unit 4 Closure Activity and Bring to Class . Worked Out Solutions 1 . Worked Out Solutions 2 . | . 9 | 17 | 18 | 19 | 20 | 21 | . | Unit 4 Closure Activity . Unit 4 HW 12: . Complete Unit 4 Closure Activity . Core Problems: . 1.2, 1.4, 2.1, 3.1 (a&amp;c), 4.1, 4.2(c), 5.1, 5.3(b), 5.4, 6.1, 6.2, 6.6,7.1, 7.2(c), 7.3(c), 8.1, 8.2 . Worked Out Solutions . | Begin Unit 5: Applications of Integration . 6.1: Area Between Curves . Notes Template . Class Notes . Unit 5 HW 1: . p. 486 6.1 #6, 8, 15, 32, 47, 58, 60, 66, 67, 72 . Worked Out Solutions . | 6.2: Average Value of a Function . Notes PowerPoint . Unit 5 HW 2: . p. 494 6.2 #9, 10, 14, 15, 18, 20, 21, 23, 24, 26, 32 . Worked Out Solutions . | Test 4 . Integration . HW: . See 10/19/2022 . | 6.3: The Definite Integral as an Accumulation Function . Notes PowerPoint . Unit 5 HW 3: . p. 505 6.3 #8, 12, 13, 14, 15, 20, 21, 26, 27 . Worked Out Solutions . | . 10 | 24 | 25 | 26 | 27 | 28 | . | 6.4: Rectilinear Motion Revisited . Notes Template . Class Notes . Unit 5 HW 4: . p. 515 6.4 #15, 17, 24, 26, 28, 34 . Worked Out Solutions . | 6.5: Volume (Known Cross Sections) . Notes Template . Class Notes . Unit 5 HW 5: . Volume of Solids with Known Cross Sections Fun Worksheet 😊 . Worked Out Solutions . | 6.5: Volume (Disks and Washers) . Notes Template . Class Notes . PowerPoint . Reference Questions . Unit 5 HW 6: . p. 528 6.5 #22, 25, 31, 32, 39, 40, 52, 58, 62 . Solutions . | 6.5: Volume (Cylindrical Shells) . Notes Template . Class Notes . Unit 5 HW 7: . p. A28 Appendix D #7, 10, 13, 16, 19, 22, 28, 31, 48 . Worked Out Solutions . | 6.6: Arc Length . Notes Template . Class Notes . Unit 5 HW 8: . Area, Volume, and Arc Length Fun Worksheet 😊 . Worked Out Solutions . Print Unit 5 Closure Activity and Bring to Class . | . 11 | Professional Development 31 | November 1 | 2 | 3 | 4 | . | No School for Students | Unit 5 Closure Activity . Unit 5 HW 9: . Complete Unit 5 Closure Activity . Worked Out Solutions . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . Worked Out Solutions . | Final Part 1: FR . Application of the Definite Integral . HW: . Trimester I Review Fun Worksheet ☺ . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | . 12 | 7 | 8 | 9 | 10 | Veteran’s Day 11 | . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | AM: Trimester I Review . PM: Trimester I Final Exam . Multiple Choice . Period 5 . HW: . Study and prepare for Final Exam . | Trimester I Final Exam . Multiple Choice . Periods 1 &amp; 2 . | Trimester I Final Exam . Multiple Choice . Periods 3 &amp; 4 . Notes Template for Monday, Nov. 14 . | Holiday – No School 😊 | .",
            "url": "https://gwang1224.github.io/repository_1/2022/08/28/Calculus-BC-Calendar.html",
            "relUrl": "/2022/08/28/Calculus-BC-Calendar.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Python Quiz",
            "content": "art = &quot;&quot;&quot; .-_&#39;&#39;&#39;-. .-. ____ _______ .-&#39;&#39;-. _ _ .-&#39;&#39;&#39;-. ,--. ___ _ .-./`) ____..--&#39; &#39;_( )_ | _ _ .&#39; __ `. / __ .&#39;_ _ ( &#39; ) / _ .&#39; .-, &#39;. .&#39; | | | .-.&#39;)| | |(_ o _)| &#39; | ( &#39; ) | / &#39; | ,_/ __) / ( ` ) &#39;(_{;}_)(`&#39; )/`--&#39; / ,-.| _ | .&#39; | |/ `-&#39; | .-&#39; &#39; . (_,_)/___| |(_ o _) / |___| / |,-./ ) . (_ o _) | (_,_)(_ o _). ; &#39;_ / | :.&#39; &#39;_ | | `-&#39;`&quot;`|.-&#39;.&#39; / | | .--.| (_,_).&#39; __ _.-` | &#39;_ &#39;`) | (_,_)___| (_,_). &#39;. | _`,/ _/ |&#39; ( .-.| .. / _/ &#39; &#39;- .&#39;| | | |.&#39; _ | &gt; (_) ) __&#39; .. .. : : ( &#39; _/ ;&#39; (`. _` /| | | .&#39;._( )_ `-&#39;` | | | `&#39; /| _( )_ |( . .-&#39;_/ ) `-&#39; / `-&#39; | `&quot;/ ) | (_ (_) _) | |.&#39; (_&#39;o._) / | | / (_ o _) / `-&#39;`-&#39; / / / &#39;. _/``&quot;/) ) / . / | || (_,_)| `&#39;-...-&#39; &#39;&#39;-&#39; `&#39;-&#39; &#39;.(_,_).&#39; `._____.&#39; `&#39;-..-&#39; `-...-&#39; &#39;--&#39; `-&#39; ``-&#39;`-&#39;&#39; &#39;&#39;|_________| &quot;&quot;&quot; . print(&quot;Hi&quot;) print(art) print(&quot;Welcome to Grace&#39;s Quiz!&quot;) start = input(&quot;Do you want to take Grace&#39;s Quiz?&quot;) score = 0 def ask_question(question_num, question, answer): &quot;&quot;&quot;Asks question and determines if &quot;&quot;&quot; print(f&quot;Question {question_num}: {question}&quot;) user_answer = ask_for_answer() is_answer_right(user_answer, answer) def ask_for_answer(): &quot;&quot;&quot;Asks for an input from the user and returns user answer&quot;&quot;&quot; answer = input().lower() print(answer) return answer def is_answer_right(user_answer, answer): &quot;&quot;&quot;Inputs user answer and actual answer and adds to score if answer is right&quot;&quot;&quot; global score if user_answer == answer: score += 1 print(f&quot;Good job! The answer is {answer}!&quot;) else: print(f&quot;Sorry, incorrect 😢. The right answer was {answer}.&quot;) print(f&quot;Your score is {score}.&quot;) if start.lower() == &quot;yes&quot; or start.lower() == &quot;y&quot;: print(&quot;Great! Good luck 😊&quot;) else: print(&quot;Take a mindful minute. You got this :)&quot;) print(&quot;This game will have 5 questions!&quot;) #Asks questions ask_question(1, &quot;What command defines a function or method?&quot;, &quot;def&quot;) ask_question(2, &quot;What conditionally executes a block of code, along with else and elif?&quot;, &quot;if statement&quot;) ask_question(3, &quot;What does a jupyter notebook end in?&quot;, &quot;ipynb&quot;) ask_question(4, &quot;What is style of programming characterized by the identification of classes of objects closely linked with the methods?&quot;, &quot;object oriented programming&quot;) ask_question(5, &quot;What is the text at the front of a markdown post called?&quot;, &quot;front matter&quot;) #Prints a message depending on what score user got if score == 5: print(&quot;Wow! You know your stuff! Keep up the good work! 🤗&quot;) if score == 4: print(&quot;Almost! Try again.&quot;) if score &lt;= 3: print(&quot;You&#39;re average 😐 &quot;) . .-_&#39;&#39;&#39;-. .-. ____ _______ .-&#39;&#39;-. _ _ .-&#39;&#39;&#39;-. ,--. ___ _ .-./`) ____..--&#39; &#39;_( )_ | _ _ .&#39; __ `. / __ .&#39;_ _ ( &#39; ) / _ .&#39; .-, &#39;. .&#39; | | | .-.&#39;)| | |(_ o _)| &#39; | ( &#39; ) | / &#39; | ,_/ __) / ( ` ) &#39;(_{;}_)(`&#39; )/`--&#39; / ,-.| _ | .&#39; | |/ `-&#39; | .-&#39; &#39; . (_,_)/___| |(_ o _) / |___| / |,-./ ) . (_ o _) | (_,_)(_ o _). ; &#39;_ / | :.&#39; &#39;_ | | `-&#39;`&#34;`|.-&#39;.&#39; / | | .--.| (_,_).&#39; __ _.-` | &#39;_ &#39;`) | (_,_)___| (_,_). &#39;. | _`,/ _/ |&#39; ( .-.| .. / _/ &#39; &#39;- .&#39;| | | |.&#39; _ | &gt; (_) ) __&#39; .. .. : : ( &#39; _/ ;&#39; (`. _` /| | | .&#39;._( )_ `-&#39;` | | | `&#39; /| _( )_ |( . .-&#39;_/ ) `-&#39; / `-&#39; | `&#34;/ ) | (_ (_) _) | |.&#39; (_&#39;o._) / | | / (_ o _) / `-&#39;`-&#39; / / / &#39;. _/``&#34;/) ) / . / | || (_,_)| `&#39;-...-&#39; &#39;&#39;-&#39; `&#39;-&#39; &#39;.(_,_).&#39; `._____.&#39; `&#39;-..-&#39; `-...-&#39; &#39;--&#39; `-&#39; ``-&#39;`-&#39;&#39; &#39;&#39;|_________| Welcome to Grace&#39;s Quiz! Great! Good luck 😊 Question 1: What command defines a function or method? def Good job! The answer is def! Your score is 1. Question 2: What conditionally executes a block of code, along with else and elif? if statement Good job! The answer is if statement! Your score is 2. Question 3: What does a jupyter notebook end in? ipynb Good job! The answer is ipynb! Your score is 3. Question 4: What is style of programming characterized by the identification of classes of objects closely linked with the methods? object oriented programming Good job! The answer is object oriented programming! Your score is 4. Question 5: What is the text at the front of a markdown post called? front matter Good job! The answer is front matter! Your score is 5. Wow! You know your stuff! Keep up the good work! 🤗 .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/08/24/python-quiz.html",
            "relUrl": "/trimester%201/2022/08/24/python-quiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Agile Methodology",
            "content": ". Roles . Scrum Master (Tanisha): help facilitate the sprint by ensuring that an agile framework is followed | Frontend Developer (Claire &amp; Amitha): A front-end developer builds the front-end portion of websites and web applications | Backend Developer (ME): build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | Important Skills . Creativity Conceptualize problems and solutions | Display foresight | Make connections | Make intelligent inferences | Synthesize ideas and data | . | Critical thinking: Solving complex problems, emable discovert of deficiencies . | Effective Communication Weekly meetings | . | Collaboration through Leadership Delegating responsibility | Demonstrating effective time management | Initiating new ideas | Major decision-making | Managing conflict | Managing groups | Multitasking | Teaching and mentoring | . | Collaboration - Teamwork Accepting responsibility | Making and implementing decisions | Managing time wisely | Meeting both short- and long-term goals | Organizing | Setting and meeting deadlines | . | Researching Analyzing information | Brainstorming solutions | Delineating needs and requirements | Extracting information from data | Gathering information | Forecasting possible roadblocks | Setting goals | Solving problems | . | Technical Being easy to work with | Quick to learn | Glad to learn | Failing and always willing to try new things | Willing to open new doors in case of a drastic oversight | . |",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2022/08/24/agile.html",
            "relUrl": "/trimester%201/2022/08/24/agile.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Markdown Post Tips",
            "content": "Grace’s First Markdown Post 🤪 . Setup . Heading 1 . Heading 2 . Heading 3 . Heading 4 . Markdown file format: YEAR-MONTH-DAY-filename.md | . | include Python code | italics | bold | code font text | create links | lists item 1 | item 2 | | . quotation . . Alert Box! . Info Box! . General preformatted text: . # Do a thing do_thing() . Python code and output: 1 . # Prints &#39;Hello World&#39; print(&quot;Hello World&quot;) . Hello World . Shell command . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Yaml . key: value - another_key: &quot;another value&quot; . Cool Tables . I like . tables | :) | . The 2022 AP Computer Science Principles scores: pic.twitter.com/UfpBEnEAcE . &mdash; Trevor Packer (@AP_Trevor) June 23, 2022 This is a footnote &#8617; . |",
            "url": "https://gwang1224.github.io/repository_1/important%20reference/2022/08/21/grace-markdown-post.html",
            "relUrl": "/important%20reference/2022/08/21/grace-markdown-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Grade Calculator",
            "content": "| API | Grades | . Grade Calculator . Total : 0.0 Count : 0.0 Average : 0.0 Input scores, press tab to add new number:",
            "url": "https://gwang1224.github.io/repository_1/frontend/grades",
            "relUrl": "/frontend/grades",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Binary Conversion",
            "content": "hi . Binary Math with Conversions . Shift Left Plus Binary Octal Hexadecimal Decimal ASCII Minus Shift Right . &lt;&lt; | +1 | 00000000 | 0 | 0 | 0 | 0 | -1 | &gt;&gt; | . HEX Code Color | | | | | | | | | | | | | | | | | | | | | | | | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/07/07/binary_conversion.html",
            "relUrl": "/trimester%202/2022/07/07/binary_conversion.html",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Trimester 2 N@TM Reflection",
            "content": "Computer Science Projects . Us! . . Other groups . Aadya . . Aadya’s group worked on a website for organizing Del Norte Clubs. . Sarayu . . I really like the aesthetics of Sarayu’s project and their idea. They created a website for discovering asian foods. I like how their project promotes diversity and can help people explore new cultures and their foods. . The Arts . Graphic Design . . These were so cool! I thought they were pictures at first but then I realized this was animation. The donuts looked very real and looked very scrumptious. . Photography . . I liked this picture of Del Norte with the sunset. I don’t usually stay at school that late to see the sunset so this was a really nice moment to be able to experience through the picture. . Ceramics . . This describes my mental state during finals week although I would not eat that dead bird. . . This was my favorite art piece. I’ve seen this on TikTok and its a really cool plant waterer. I thought it was so cool that they could make this. . . This one was very realistic, I though it was real wood but then I remembered I was in ceramics and realized it wasn’t wood. . Videography . I forgot to take photos but there was a really nice film about someone’s two cats. .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/02/27/tri2-natm.html",
            "relUrl": "/trimester%202/2022/02/27/tri2-natm.html",
            "date": " • Feb 27, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Trimester 2 College Board Create Performace Task",
            "content": "Program Purpose . 3.a.i . The purpose of the program is to test the users knowledge on periods and overall women’s health and educate people on what they are lacking in their education. . 3.a.ii . The function of program is that the user will be asked 10 questions about periods and women’s health. After they have inputted their answers and submitted, their score out of 10 will be displayed. If the user wishes to log their score, then they can input their name and score into the scoreboard and see other people’s scores as well. . 3.a.iii . In the quiz, the user will input the answers and after they submit, the output will be the score that is generated from how well they did. Additionally, using the database, the user is able to input their name and their score to store in a scoreboard. The output is that their name and score will be printed along with the others in a table. . Data Abstraction . 3.b.i . Data stored in a list . . 3.b.ii . . Managing Complexity . 3.b.iii . The name of the list I used is called answers. . 3.b.iv . The data in the list consists of the answers to the quiz. . 3.b.v . The data in the list helps manage complexity because it shortens the code by not having to create independent variables for every single questions. After the user has submitted their answer, the user answers can then be checked through iterating through the answers list to check for correct answers rather that checking each individual answer with separate variables. . Procedural Abstraction . 3.c.i . Procedure with Parameters . . . 3.c.ii . . 3.c.iii . These code segments display the three procedures in this program: create, read, and delete. The Score function takes the inputs name and score and stores the parameters in json formatted dictionary. This data is then fetched separately into the create, read, and delete functions. The read function displays the data onto the scoreboard, allowing users of the website to see everybody’s scores. Whereas the create function allows the user to input new data that is then outputted using the read function. THe delete function allows the user to delete all the data when the Score function is called. The create function allows for the user to create an input with their name and score, the read function reads the json formatted data, and the delete function deletes all the data. . Algorithmic Implementation . 3.c.iv . This program uses iteration function as seen when validating the user data. When the user does not input a number for their score, the error message “Please enter a valid score or name” will display. Every time the user clicks the submit button with invalid data, this error message will iterate until the requirement of submitting a number that is between 0 and 10 is achieved. . The program uses sequencing in the create where the user inputs their name and score. As seen the the _Create function, the program first checks to see if the user’s name is greater than 2 letters, then it checks whether the score input is greater than 1. If either of these if false, the program will not compute. Then, the user is added to the database after checking for these errors. . In the validate function, only inputs that fit in the requirements are allowed to be added to the database. As seen, there is an if else statement. The if statement catches all the “bad” data, which includes scores that are letters, greater than 10, or less than 0. However, if the input passes these checks, the create_user function will be initiated and the user inputs will be added to the backend database. . Testing . 3.d.i . First call: The first call is a create and fetch from the _Create and _Read function that is used to save the user name and score data that is inputted by the user. The inputs for name is “Taylor Swift” and score is “9”. The data appended to the backend, then displayed on the front end. Second Call: The second call is a create and fetch from the _Create and _Read function that is used to save the user name and score data that is inputted by the user. The inputs for name is “Harry Styles” and score is “a”. The data unable to be appended to the backend and does not show on the frontend. . 3.d.ii . Condition(s) tested by first call: The first call tests the condition that the name input are letters and that the score input in a number. If this is true, the create_user() function will execute. Condition(s) tested by second call: The second call tests the validate function to make sure that the score is a number, which it fails. . 3.d.iii . Results of the first call: The result of the first call that the name and score are inputted into the backend database and shown on the frontend. Results of the second call: The result of the second call is that the error message will display that tells the user to input a valid name and score. .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/02/27/tri2-final-cpt.html",
            "relUrl": "/trimester%202/2022/02/27/tri2-final-cpt.html",
            "date": " • Feb 27, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Collegeboard 5.5 & 5.6",
            "content": "5.5 Legal and Ethical Concerns . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . MIT License Permission is granted to use, copy, modify, and distribute the software | minimal restrictions on the use of the software and allows it to be used in commercial and non-commercial projects | allows anyone to use, modify, and distribute the licensed software for any purpose, including commercial use, as long as the original copyright and license notices are included | . | GPL License Freedom to use, modify, and distribute the software: Users of the software are free to use it for any purpose, make changes to it, and distribute it, either for free or for a fee | source code of the software must be made available to anyone who receives a copy of the software | no discrimination | . | . | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . Software licenses determine the terms and conditions under which software can be used, modified, and distributed. | Digital rights, such as privacy and intellectual property rights, are important in considering ethical concerns. For example, in the case of music, licensing can prevent music from being pirated so that artists can take credit for their work. | This is important for software coders because it allows creators to control their creations and protect their rights to avoid other people stealing their data. | Software licenses, digital rights, and legal and ethical considerations are all complex and interrelated topics that impact the development, distribution, and use of software. | . | Make a license for your personal . An MIT License allows for greater flexibility in the use of the software. GPL license is requires derivative works be licensed under the same terms as the original software. We chose the MIT license for greater flexibility. It is easier to distribute code, which can be beneficial to other users. | . | License file . 5.6 Safe Computing . Describe PII you have seen on project in CompSci Principles. . Projects that include PII on a project in CSP is seen on the login page. When people login to a site on our website, their information includes their name and their email. | . | What are your feelings about PII and your personal exposure? . I think PIIs have the potential to be dangerous because people are able to stalk you online and I don’t want to be stalked. However, PII’s are necessary for login and user experience so it is important to be sure that the information you are giving is to a secure website where your information will not be stolen. | . | Describe good and bad passwords? What is another step that is used to assist in authentication. . A good password is one that can not be guessed by other people and does not include any personal information. | A bad password is 1234567890 or something that can be easily guessed. | . | Try to describe Symmetric and Asymmetric encryption. . Symmetric Encryption: Method of encryption where the same key is used for both encryption and decryption; is fast and efficient (SECRET KEY) . | Asymmetric Encryption: encryption that uses two different keys for encryption and decryption. The public key, is used for encrypting the data and shared widely, and the private key, is used for decrypting the data and must be kept confidential. . | . | Provide an example of encryption we used in AWS deployment. . AES-256 encryption | . | Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . A phishing scheme I have seen are people scamming personal information through fake lotteries. People send text messages saying you won $100 dollars and will ask for your address and other personal info. This is bad. | Other phishing include malicious websites, voice mail messages, or email. | . |",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/02/12/5.5-5.6.html",
            "relUrl": "/trimester%202/2022/02/12/5.5-5.6.html",
            "date": " • Feb 12, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Collegeboard 5.3 & 5.4",
            "content": "Collegeboard 5.3 &amp; 5.4 . Intentional or Purposeful bias Group Discussion . “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . People who use Facebook are generally 24 to 35 | People who use TikTok are generally 13 to 17 | Younger individual tend to use Tiktok more than Facebook | There is no purposeful exclusion because anyone can download the app and use the social media. It is not harmful,. | Having age separation is harmful for business because the company can target a larger demographic and could be corrected to bridge the ideological gap between old and young. | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . Virtual assistants have female voices because females are seen as more gentler and women’s voices are able to be articulated more clearly. | I don’t think this feature is harmful, however, the action could be corrected to be more equitable. | The business can be corrected so that during setup, the user can choose between women and male voices. | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . Social media, such as TikTok, will recommend a video that will fit your liking on your For You Page. This influences my decisions because their may be certain ads or videos that will pique my interests and make me waste more time on social media. Ads that cater to my liking will make me want to purchase more goods. | . HP computers are racist . Does the owner of the computer think this was intentional? . no | The guy doesn’t seem to think this was intentional. He found it humorous. | . How do you think this happened? . The people that tested the computer were probably all white. The team that created the program was not diverse enough to detect all the flaws in the program. | . Is this harmful? Was it intended to be harmful or exclude? . This is harmful because it excludes people from using the functions of the computer. However, this was not intended to be harmful or exclude people. | . Should it be corrected? . THis should be corrected so that all people will be able to use the application. | . What would you or should you do to produce a better outcome? . When developing a second version, I would hire a more diverse team so that more point of views can be expressed and more problems can be fixed. | . 5.3 Reflection . Computer bias is is a very important issue because algorithms developed sometimes can unintentionally exclude people, especially people of color. This should be a problem that could be fixed by including more point of views and having a diverse team. In the Trimester 2 project my team is working on, we are creating a period tracker. We previously did not have any male members a part of our team but now we have a new addition, which could help us decrease coding bias for a demographic that would typically not use a period tracking app. . Crowdsourcing Group Discussion . We have all experienced Crowdsourcing by using external data through API’s, namely RapidAPI. This data has influenced how we code and shown possibilities in obtaining and analyzing data. Discuss APIs you have used. . Data in APIs are accessible to many people. Thus, everyone can query the data and use it in any project they are making. Everyone who is using and API is obtaining the same data but can be analyzing things differently. The data is useful as one person can benefit the whole computer science community through this. | . We have all participated in code Crowdsourcing by using GitHub. Many of you have forked from the Teacher repository, or exchanged code with fellow students. Not only can we analyze GitHub code, but we can obtain profiles and history about the persons coding history. What is the biggest discovery you have found in GitHub? . My biggest discovery on GitHUb is that you can find anyone’s account or code as long as it’s public. This has been useful when I want to be a lazy coder and just copy someone’s (such as Mr. Mort’s) code. It is also useful to see other people’s development process through their issues, which can help me model my project after. | . Kaggle datasets for code and science exploration. The avenue of data points us youtube or netflix channels. Analyzing crowd data helps us make decisions. Exam top 10 to 20. Did you see anything interesting? . The top 10 or 20 datasets on kaggle don’t collectively follow a specific theme, but relevant to social trends and seems like what people are most often searching up on the website. | . Hacks . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . A crowdsource idea that is interesting is creating an evnrionment such as stack overflow, where people can give suggestions based on what the issue a person had in their code. In class, we have a stack overflow system on slack, where people can give input and suggestions on people’s code who have errors. | . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . For the Del Norte whole, crowd-sourcing can be done through gathering student suggestions for school improvements. Since we can always improve things going on around school, people can create a survey and comment on how we can improve Del Norte, whether it be in environmental efforts or general anti-bullying efforts. This way, several point of views can be expressed and things can be addressed. | . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . For our project, we can collect data that counts the number of males and females interested in our project. Because our project is about periods, I would assume that more females and less males would be interested in our project. Thus, with this data, we could then see how we could improve the app to possibly include a greater male audience. | As a computer science class, we could see what genres of websites each group created and how many people visited each to see what kind of website is the most interesting to the parent population. | .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/02/01/5.3-5.4.html",
            "relUrl": "/trimester%202/2022/02/01/5.3-5.4.html",
            "date": " • Feb 1, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "College Board Create Performance Task for FLOW",
            "content": "College Board Create Performance Task for FLOW . Program Purpose . The purpose of this feature is for the users of the FLOW website to be able to customize their usage of the website. Users of the website can input their username and password to login to the account. The feature is able to function through the inputs (password and username) and connecting it to a backend API so that user data can be saved. . Data Abstraction . The data in this feature will be stored in a dictionary. An example dictionary that would be stored in the api is … . {&quot;name&quot;: &quot;Grace Wang&quot;, &quot;uid&quot;: &quot;gracew&quot;, &quot;dob&quot;: &quot;09-02-2005&quot;, &quot;age&quot;: 17, &quot;password&quot;: &quot;gw1234567890&quot;} . Every time user info is imported, it would be set to a variable, such as u1 and using the OOP code for creating users, it would be updated in the API. . Managing Complexity . Using a dictionary would manage the complexity of the program because their are many variables. Using a dictionary is especially useful because we can set key/value pairs. If we were not to use dictionaries, we would have to set each input as a seperate variable, such as.. . name1 = &quot;Grace Wang&quot; uid1 = &quot;gracew&quot; dob = &quot;09-02-2005&quot; age = &quot;17&quot; password = &quot;gw1234567890&quot; . Using dictionaries shortens the code significantly. . Procedural Abstraction . Using the class we created for signins, we have the inputs of name, uid, date of birth and password into the User function . u2 = User(name=&quot;Grace Wang&quot;, uid=&quot;gracew&quot;, password=&quot;gw1234567890&quot;, dob=date(2005,9,2)) . Algorithm Implementation . Sequencing, selection, and iteration will be used in this feature. Sequencing is used in the calculation of age algorithm. When the user inputs their date of birth, the algorithm will calculate their age and store it in the API. Selection will be included as when the user inputs their username and password, if they the username and password is in the API, they will be allowed into their account, however, if they input wrong, they will be prompted to input again or make a new account. Iteration occurs when the algorithm repeatedly accepts new accounts through user inputs. . Testing . This algorithm can be tested by the user inputting their username and password for an existing account logging in. Then the user can type in the wrong username and password and they will not be allowed to continue to their account . Video Plan . Navigate to Signin Page | Input correct username and password | Continue to user account | Reset signin page | Login with wrong user name and password | Page will prompt to try to login again or to make an account |",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/01/30/flow-cb.html",
            "relUrl": "/trimester%202/2022/01/30/flow-cb.html",
            "date": " • Jan 30, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Collegeboard MCQ Test 2",
            "content": "Collegeboard MCQ Test 2 . . . The question asks for an expression where the age is greater than 16 (they are able to drive) but less than 18 (not old enough to vote). I is wrong because in the second statement (age &lt;= 18), 18 should not be included because the person is able to vote at age 18. II is correct because the age includes greater than or equal to 16 and not greater than or equal to 18. III is correct because it also includes less than 18 and greater than 16. Therefore D is correct. . . . I read this question wrong. I was debating on whether to choose C or D. However, I clicked the one that moves correctly instead the one that moves incorrectly. I made this mistake because of carelessness. . . The value of the variable result is set to 0. The repeat box on the outside is executed 3 times and the inner is executed y times. When both boxes are executed it produces 3y as 3 is multiplied by y times. The inner block increases the variable result by 1 so the final value of the variable result is 3y. . . The correct answers are B and C. Answer B is correct when we want to start with initial coordinates for the center of the circle and then add 1 to increase the size of the circle. Answer C is correct when we want to start with the initial coordinates for the center then subtract 1 to decrease the size of the circle. For this one, the drawCircle command is before the y &lt;- y-1 command so that the circle is drawn before the radius is decreased. I did not understand the question well enough when answering which is why I got it wrong. . . I misunderstood this question. The question asked the maximum number of times needed using binary search to find a number. Instead, I thought the question asked what is the maximum list length for the binary search. When using binary search to find an element in a list of 500 elements, the following list lengths should be as follows: 500, 250, 125, 63, 31, 15, 7, 4, 2, 1, which is 10 times. . . Heuristics is an approach to problem-solving in which the objective is to produce a working solution within a reasonable time frame. Instead of looking for a perfect solution, heuristic strategies look for a quick solution that falls within an acceptable range of accuracy. This can increase the efficiency of coders. . Heuristic approach is used when the problem can’t be solved within a reasonable time frame and thus have to resort to a solution that compromises some of its features. . . Not everything can be solved by algorithms. Some problems, such as determining if any program will eventually stop, cannot be solved by an algorithm. .",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/01/26/cb-mc.html",
            "relUrl": "/trimester%202/2022/01/26/cb-mc.html",
            "date": " • Jan 26, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Collegeboard 5.1 & 5.2",
            "content": "Collegeboard 5.1 &amp; 5.2 Reflection . 5.1 Beneficial and Harmful Effects . ChatGPT! So cool! . . There are always benefits and disadvantages to technology Reflection: . Three of beneficial and corresponding harmful effects of computing Beneficial: increased productivity through automation and simplification of daily tasks and processes. Harmful: People will lose their jobs due to removal of jobs that require manual labor and repetition. | Beneficial: Computation offers entertainment to the public, ex. games, video streaming websites. Harmful: People become addicted to online entertainment and social media and become disconnected with the real world. | Beneficial: Wider and faster access of information through internet search engines such as Google. Harmful: Anyone can spread false information that can lead other people to make bad choices. | | Talk about dopamine issues. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? Dopamine issues surrounding happiness felt from social media is an issue. Because some people feel fulfilled with the entertainment provided by social media. They can become addicted. I have avoided this problem of social media addiction by deleting Instagram and Snapchat on my phone. However, I do understand how people can get addicted to their computers which would lead to detrimental personal study habits and success. Watching Youtube videos or scrolling through Instagram does give me a brief rush of dopamine at the end of the day when I have finished all my work so it does not waste my time. | . | Potential harm of your project. People who don’t have periods feel left out :( | . | 5.2 Digital Divide . Examples: . Poorer or rural areas | Some countries may have different or restricted access, censorship | Socioeconomic (money), geographic (location), demographic (education, nationality, religion, and ethnicity) | Older generations of computers | Amish | Internet blockers | . Reflection . How does someone empower themselves in a digital world? Learning how to use the computer and other devices, understanding how ot use technology will allow us to have a better understanding over our digital lives. | We can also create digital to interact with others in the digital world. | Protecting personal information is important in the digital world so that bad people do not steal your classified information. | . | How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. We could help them gain access to a computer if they do not have one. We can also help educate them on how to use digital devices and the computer so that they know how to utilize it themselves. | . | Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? Whether paper or red tape blocs digital empowerment depends. If the person is in a situation where their lifestyle, depending on where they live or religion, is a severe limitation to their accessibility to technology, then red tape is blocking digital empowerment. However, in places such as technology, where computers are available for student use, the divide is blocked by paper. | . | What concerns do you have personally about the digital divide? For yourself or for others. My concern about the digital divide is that the divide in between socioeconomic backgrounds should be decreased. Access to technology provides important sources of information that everybody should have access to. | . |",
            "url": "https://gwang1224.github.io/repository_1/trimester%202/2022/01/25/5.1-5.2.html",
            "relUrl": "/trimester%202/2022/01/25/5.1-5.2.html",
            "date": " • Jan 25, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gwang1224.github.io/repository_1/trimester%201/2020/02/20/guide.html",
            "relUrl": "/trimester%201/2020/02/20/guide.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "| API | Grades | . Me . . About Me . . Hello! My name is Grace Wang! This is my website for my Computer Science Class! . My GitHub: link . &lt;/ul&gt;",
          "url": "https://gwang1224.github.io/repository_1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": ". . Welcome to Grace&#39;s Notebook . . Look below to see notes from AP Computer Science Class. Go to About Me to learn more about Grace! . Posts .",
          "url": "https://gwang1224.github.io/repository_1/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Notes",
          "content": "Student Teaching . Unit 3.1 &amp; 3.2 Unit 3.3 &amp; 3.4 Unit 3.5 &amp; 3.7 Unit 3.8 &amp; 3.10 Unit 3.9 &amp; 3.11 Unit 3.12 &amp; 3.13 Unit 3.14 &amp; 3.15 Unit 3.16 Unit 3.17 &amp; 3.18 Vocabulary . Unit 2 . Word Definition . Bits | a binary digit, the smallest increment of data on a computer Binary Conversion | . Bytes | a group of binary digits or bits (usually eight) operated on as a unit | . Hexadecimal | a numbering system with base 16,can be used to represent large numbers with fewer digits such as HEX colors | . Nibbles | nibble is four consecutive binary digits or half of an 8-bit byte | . Binary Numbers . Word Definition . Unsigned Integer | integers (whole numbers) but have the property that they don&#39;t have a + or - sign associated with them | . Signed Integer | 32-bit datum that encodes an integer in the range | . Floating Point | Data type float is sometimes called &quot;single-precision floating point&quot;. Data type double has twice as many bits and is sometimes called &quot;double-precision floating point&quot;. | . Binary Data Abstraction . Word Definition . Boolean | used to represent logical propositions, either true or false, ex. sky_sunny = True | . ASCII | most common character encoding format for text data in computers and on the internet | . Unicode | an international encoding standard for use with different languages and scripts, by which each letter, digit, or symbol is assigned a unique numeric value that applies across different platforms and programs. | . RBG | RGB (red, green, and blue) refers to a system for representing the colors to be used on a computer display | . Data Compression . Word Definition . Lossy | Lossy compression reduces file size by eliminating redundant information | . Lossless | Lossless compression retains values and manages to lower file size | . Unit 3 . Word Definition . Variables | abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time | . Data Types | Integral, Floating Point, Character, Character String, and composite types | . Lists | a sequence of finite strings that surrounded by square brackets and separated by commas, ex. foods = [&quot;pizza&quot;, &quot;watermelon&quot;, &quot;sushi&quot;, &quot;fried chicken&quot;] | . Dictionaries | an abstract data type that defines an unordered collection of data as a set of key-value pairs, ex. capital_city = {&quot;Nepal&quot;: &quot;Kathmandu&quot;, &quot;Italy&quot;: &quot;Rome&quot;, &quot;England&quot;: &quot;London&quot;} | . Algorithms | the algorithm describes the instructions to complete a task, which done by the graphic with a list of instructions to do | . Sequence | order of how to do something | . Selection | Code that will execute depending on the algorithm condition returning true or false | . Iteration | a repeating portion of an algorithm until a given condition is met | . Expressions | syntactic entity in a programming language that may be evaluated to determine its value | . Comparison Operators | compare numbers or strings and perform evaluations | . Truth Tables | | . Characters | a display unit of information equivalent to one alphabetic letter or symbol | . Strings | any series of characters that are interpreted literally by a script, ex. &quot;hello world&quot; | . Length | Gets length of string or list with len() function | . Concatenation | joining two strings together | . Traversing Strings | process one character at a time | . If, Elif, Else conditionals | Code that is initiated if a statement is true | . Nested Selection Statements | Either the true path or the false path includes yet another selection structure | . For, While loops | A for loop is a control flow statement that executes code repeatedly for a particular number of iterations | . Procedural Abstraction | when we write code sections which are generalized by having variable parameters | . Procedure | set of instructions that can take parameters (do not have to have parameters and only have ()) and return values or the function | . Python Def procedures | | . Parameters | value inputted into a function for the function to produce a result | . Return Values | the value that is returned after a function is run | . Stimulation | an imitation of a situation or process Advantages: can be safer, cost-effective, efficient, produce more data | Disadvantages: not as accurate, doesn&#39;t include outside factors | | . Collatz | The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. | . Hailstone numbers | The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. | . Undecidable problems | An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. | . Unsolvable problems | An unsolvable problem is one for which no algorithm can ever be written to find the solution. | . .",
          "url": "https://gwang1224.github.io/repository_1/_pages/notes.html",
          "relUrl": "/_pages/notes.html",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Schedule",
          "content": "Monday, Tuesday, Thursday . Class Start Time End Time . AP Calculus BC | 8:35 | 9:44 | . AP US History | 9:49 | 10:58 | . Break | 10:58 | 11:08 | . AP English Language | 11:13 | 12:52 | . Lunch | 12:22 | 12:52 | . AP Computer Science Principles | 12:57 | 2:06 | . Office Hours | 2:06 | 2:31 | . AP Physics | 2:36 | 3:45 | . Wednesday . Class Start Time End Time . AP Physics: Mechanics | 9:55 | 10:53 | . AP Calculus BC | 10:58 | 11:56 | . Break | 11:56 | 12:06 | . AP English Language | 12:11 | 1:09 | . Lunch | 1:09 | 1:39 | . AP Computer Science Principles | 1:44 | 2:42 | . AP US History | 2:47 | 3:45 | . Friday . Class Start Time End Time . AP Physics: Mechanics | 8:35 | 9:49 | . AP Calculus BC | 9:54 | 11:08 | . Break | 11:08 | 11:18 | . AP English Language | 11:23 | 12:37 | . Lunch | 12:37 | 1:07 | . AP Computer Science Principles | 1:12 | 2:26 | . AP US History | 2:31 | 3:45 | .",
          "url": "https://gwang1224.github.io/repository_1/_pages/schedule.html",
          "relUrl": "/_pages/schedule.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": ". . Welcome to Grace&#39;s Notebook . . Look below to see notes from AP Computer Science Class. Go to About Me to learn more about Grace! . Posts .",
          "url": "https://gwang1224.github.io/repository_1/page2/",
          "relUrl": "/page2/",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "",
          "content": ". . Welcome to Grace&#39;s Notebook . . Look below to see notes from AP Computer Science Class. Go to About Me to learn more about Grace! . Posts .",
          "url": "https://gwang1224.github.io/repository_1/page3/",
          "relUrl": "/page3/",
          "date": ""
      }
      
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gwang1224.github.io/repository_1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}